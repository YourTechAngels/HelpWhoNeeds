{"version":3,"sources":["fireBase.js","contexts/AuthContext.js","components/structure/AppNavBar.js","components/landing/Landing.js","components/landing/About.js","components/landing/Contact.js","components/structure/Footer.js","components/login/SignIn.js","components/login/SignUp.js","components/login/ForgotPassword.js","components/registrationPage/RegistrationPage.js","components/volunteerTask/TaskDetail.js","components/volunteerTask/Notification.js","components/volunteerTask/CofirmDailog.js","components/volunteerTask/VolunteerSearchTask.js","components/task/NewTaskForm.js","components/task/TaskTable.js","components/task/AddTask.js","components/task/tasksDataOnly.js","components/volunteerTask/VolunteerWelcomePage.js","components/PrivateRoute.js","App.js","reportWebVitals.js","index.js"],"names":["app","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","AuthContext","React","createContext","useAuth","useContext","AuthProvider","children","useState","currentUser","setCurrentUser","loading","setLoading","useEffect","onAuthStateChanged","user","value","login","email","password","signInWithEmailAndPassword","signup","createUserWithEmailAndPassword","signout","signOut","resetPassword","sendPasswordResetEmail","Provider","useStyles","makeStyles","theme","root","flexGrow","margin","spacing","title","appBar","backgroundColor","HomeIcon","props","SvgIcon","d","AppNavBar","classes","setAuth","anchorEl","setAnchorEl","console","log","open","Boolean","history","useHistory","handleClose","a","push","alert","className","FormGroup","FormControlLabel","control","Switch","checked","onChange","event","target","aria-label","label","AppBar","position","Toolbar","color","fontSize","onClick","to","Typography","variant","Button","component","Link","IconButton","aria-controls","aria-haspopup","currentTarget","Menu","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","button","pInfo","textAlign","divContentWrapper","minHeight","paddingLeft","Landing","About","Contact","footer","boxSizing","height","padding","borderTop","width","Footer","href","Copyright","align","Date","getFullYear","paper","marginTop","display","flexDirection","alignItems","avatar","palette","secondary","main","form","submit","SignIn","useParams","userType","emailRef","useRef","passwordRef","error","setError","nameLabel","e","preventDefault","current","Container","maxWidth","CssBaseline","Avatar","Alert","severity","AlertTitle","onSubmit","TextField","required","fullWidth","type","inputRef","autoFocus","Checkbox","disabled","Grid","container","item","xs","Box","mt","Signup","passwordConfirmRef","ForgotPassword","message","setMessage","textFld","border","fontWeight","marginLeft","RegistrationPage","initialInputState","firstName","lastName","DateOfBirth","postcode","address1","address2","city","county","formData","setFormData","handleChange","name","Fragment","flex-start","style","evt","sm","autoComplete","InputLabelProps","shrink","ButtonGroup","TaskDialog","data","useTheme","fullScreen","useMediaQuery","breakpoints","down","Dialog","aria-labelledby","DialogTitle","DialogContent","noValidate","taskType","taskSummary","multiline","rows","DialogActions","top","Notification","notify","setNotify","reason","isOpen","Snackbar","autoHideDuration","dailog","dailogContent","dailogAction","justifyContent","ConfirmDailog","confirmDialog","setConfirmDialog","subTitle","size","minWidth","onConfirm","SPACED_DATE_FORMAT","options","filterType","selectableRows","selectableRowsOnClick","h5","intialTasks","date","distance","volId","VolunteerSearchTask","createMuiTheme","overrides","MuiDataTable","responsiveScroll","maxHeight","MUIDataTableBodyCell","pendingTasks","setPendingTasks","myTasks","filter","task","unassignedTasks","showDialog","setShowDialog","dialogData","setDialogData","notifyMsg","setNotifyMsg","confirmDailog","handleClickOpen","myTaskCols","sort","viewColumns","customBodyRender","tableMeta","updateValue","rowData","moment","format","assignTask","map","returnTask","selectedTask","find","unassignedTaskCols","columns","p","FormDialog","addTask","getFormDate","getMonth","toString","padStart","getDate","useForm","defaultValues","taskDetails","startDate","startTime","endDate","endTime","mode","register","handleSubmit","reset","errors","watch","setValue","clearErrors","resetAndClose","watchAll","reqFieldMsg","start","end","includes","helperText","inputProps","min","hasOwnProperty","validate","setMinutes","getMinutes","count","TaskTable","taskList","h1","largeButton","largeIcon","icon","marginBottom","AddTask","status","setTaskList","nextId","showAddDialog","setShowAddDialog","setTaskType","NewTaskForm","newTask","updatedTaskList","VolunteerWelcome","PrivateRoute","Component","rest","render","App","basename","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d9cba28.chunk.js","sourcesContent":["import firebase from \"firebase/app\"\r\nimport \"firebase/auth\"\r\n\r\nconst app = firebase.initializeApp({\r\n    \r\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY ,\r\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN ,\r\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID ,\r\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET ,\r\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID ,\r\n    appId: process.env.REACT_APP_FIREBASE_APP_ID\r\n})\r\n\r\nexport const auth = app.auth()\r\nexport default app","import React, { useContext, useState, useEffect } from \"react\"\r\nimport { auth } from \"../fireBase\"\r\n\r\nconst AuthContext = React.createContext()\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext)\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [currentUser, setCurrentUser] = useState()\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  function signup(email, password) {\r\n    return auth.createUserWithEmailAndPassword(email, password)\r\n  }\r\n\r\n  function login(email, password) {\r\n    return auth.signInWithEmailAndPassword(email, password)\r\n  }\r\n\r\n  function signout() {\r\n    return auth.signOut()\r\n  }\r\n\r\n  function resetPassword(email) {\r\n    return auth.sendPasswordResetEmail(email)\r\n  }\r\n\r\n//   function updateEmail(email) {\r\n//     return currentUser.updateEmail(email)\r\n//   }\r\n\r\n//   function updatePassword(password) {\r\n//     return currentUser.updatePassword(password)\r\n//   }\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged(user => {\r\n      setCurrentUser(user)\r\n      setLoading(false)\r\n    })\r\n\r\n    return unsubscribe\r\n  }, [])\r\n\r\n  const value = {\r\n    currentUser,\r\n    login,\r\n    signup,\r\n    signout,\r\n    resetPassword,\r\n    //updateEmail,\r\n    //updatePassword\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  )\r\n}","import React, { useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n    AppBar,\r\n    Toolbar,\r\n    Typography,\r\n    Button,\r\n    IconButton,\r\n    Switch,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    MenuItem,\r\n    Menu,\r\n    SvgIcon,\r\n} from \"@material-ui/core\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& > svg\": {\r\n            margin: theme.spacing(2),\r\n        },\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    appBar: {\r\n        backgroundColor: \"#9370db\",\r\n    },\r\n}));\r\n\r\nfunction HomeIcon(props) {\r\n    return (\r\n        <SvgIcon {...props}>\r\n            <path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\" />\r\n        </SvgIcon>\r\n    );\r\n} /*For HomeIcons */\r\n\r\nconst AppNavBar = () => {\r\n    const classes = useStyles();\r\n    const { currentUser, signout } = useAuth();\r\n    const [auth, setAuth] = React.useState(false); // React.useState(currentUser === null ? false : true); //change to true\r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n    useEffect(() => {\r\n        setAuth(currentUser === null ? false : true);\r\n    }, [currentUser]);\r\n  \r\n     console.log(currentUser );\r\n     console.log(\"auth\" + auth);\r\n    const open = Boolean(anchorEl);\r\n    const history = useHistory();\r\n\r\n    const handleChange = (event) => {\r\n        setAuth(event.target.checked);\r\n    };\r\n\r\n    const handleMenu = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    async function handleSignOut() {\r\n        try {\r\n            await signout();\r\n            setAuth(false);\r\n            history.push(\"/\");\r\n        } catch (error) {\r\n            setAuth(currentUser === null ? false : true);\r\n            console.log(error);\r\n            alert(\"failed to log out\");\r\n        }\r\n\r\n        console.log(\"auth\" + auth);\r\n        handleClose();\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <FormGroup>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            checked={auth}\r\n                            onChange={handleChange}\r\n                            aria-label=\"login switch\"\r\n                        />\r\n                    }\r\n                    label={auth ? \"Logout\" : \"Login\"}\r\n                />\r\n            </FormGroup>\r\n            <AppBar position=\"static\" className={classes.appBar}>\r\n                <Toolbar>\r\n                    <HomeIcon\r\n                        color=\"action\"\r\n                        fontSize=\"large\"\r\n                        onClick={(event) => (< Link to= \"/HelpWhoNeeds/\"></Link>)}\r\n                    />\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        Help Who Needs\r\n          </Typography>\r\n\r\n                    <Button color=\"inherit\" component={Link} to={\"/about\"}>\r\n                        About\r\n          </Button>\r\n                    <Button color=\"inherit\" component={Link} to={\"/contact\"}>\r\n                        Contact\r\n          </Button>\r\n                    {auth && (\r\n                        <div>\r\n                            <IconButton\r\n                                aria-label=\"account of current user\"\r\n                                aria-controls=\"menu-appbar\"\r\n                                aria-haspopup=\"true\"\r\n                                onClick={handleMenu}\r\n                                color=\"inherit\"\r\n                            >\r\n                                <AccountCircle />\r\n                            </IconButton>\r\n                            <Menu\r\n                                id=\"menu-appbar\"\r\n                                anchorEl={anchorEl}\r\n                                anchorOrigin={{\r\n                                    vertical: \"top\",\r\n                                    horizontal: \"right\",\r\n                                }}\r\n                                keepMounted\r\n                                transformOrigin={{\r\n                                    vertical: \"top\",\r\n                                    horizontal: \"right\",\r\n                                }}\r\n                                open={open}\r\n                                onClose={handleClose}\r\n                            >\r\n                                <MenuItem onClick={handleClose}>Profile</MenuItem>\r\n                                <MenuItem onClick={handleClose}>My account</MenuItem>\r\n                                <MenuItem onClick={handleSignOut}>Sign Out</MenuItem>\r\n                            </Menu>\r\n                        </div>\r\n                    )}\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AppNavBar;\r\n","import { Link, useHistory } from \"react-router-dom\"\r\nimport { makeStyles, Button } from \"@material-ui/core\"\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\n\r\nconst useStyles = makeStyles({\r\n    button:{\r\n        margin:\"10px\",\r\n    },\r\n    pInfo:{\r\n        textAlign: \"center\",\r\n    },\r\n    divContentWrapper:{\r\n        textAlign: \"center\",\r\n        minHeight: \"100%\",\r\n        paddingLeft: \"50px\",\r\n    }\r\n\r\n});\r\n\r\nconst Landing = () => {\r\n    \r\n    const classes = useStyles();\r\n    const { currentUser } = useAuth();\r\n    const history = useHistory();\r\n    const handleClick =() => { \r\n        // if (currentUser !== null) {\r\n        //     <Link to=\"/myTask\"\r\n        // }\r\n\r\n        (currentUser ? history.push(\"/myTask\") : history.push(\"/login/Volunteer\") )           \r\n    } \r\n    const handleUserClick =() => {\r\n         (currentUser ? history.push(\"/addTask\") : history.push(\"/login/AssistanceRequester\") )\r\n    }     \r\n      \r\n   \r\n    return (\r\n            <div className={classes.divContentWrapper} >\r\n                <h1>Help Who Needs</h1>\r\n                <p>\r\n                    Our TechForGood project aims to match a volunteer with a vulnerable\r\n                    person who is shielding in these unprecedented times. Hence our\r\n                    application is called HelpWhoNeeds. The app will aim to match a\r\n                    volunteer with a vulnerable person in their immediate local area\r\n                    helping with chores such as shopping, GP visits, prescriptions, dog\r\n                    walking or just some social contact with the appropriate measures in\r\n                    place. We hope this app brings some comfort and relief to the users\r\n                    with a sense of moral and social obligation. \r\n        </p>\r\n\r\n        <p className={classes.pInfo}> If you would like help or need any assistant using our system, please call <strong>0800 123 4567</strong>.</p>\r\n                <Button\r\n                    className= {classes.button}\r\n                    variant=\"outlined\"\r\n                    color=\"default\"\r\n                    onClick = {handleUserClick}             \r\n                >\r\n                    I need Help\r\n                </Button>\r\n                \r\n                <Button\r\n                    className= {classes.button} \r\n                    variant=\"outlined\"\r\n                    color=\"default\"\r\n                    onClick = {handleClick} \r\n                >\r\n                    I can Help\r\n        </Button>\r\n        </div>\r\n        \r\n    );\r\n};\r\n\r\nexport default Landing;\r\n","\r\nconst About = () => (\r\n    <div>\r\n        <h1>This is the About Page</h1>\r\n        <p>\r\n            Add the description of our Team (Your Tech Angels) and the project \r\n    </p>\r\n    </div>\r\n);\r\n\r\nexport default About;\r\n","\r\nconst Contact = () => (\r\n    <div>\r\n        <h1>This is the Contact Page</h1>\r\n        <p>\r\n            Add the Contact form\r\n    </p>\r\n    </div>\r\n);\r\n\r\nexport default Contact;\r\n","import { makeStyles } from \"@material-ui/core/styles\"\r\n\r\nconst useStyles = makeStyles({\r\n    footer:{\r\n        boxSizing: \"border-box\",\r\n        height: \"50px\",\r\n        padding: \"15px\",\r\n        backgroundColor: \"#eee\",\r\n        borderTop: \"1px solid #e0e0e0\",       \r\n        position: \"absolute\",\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n    },\r\n\r\n});\r\n\r\nfunction Footer(){\r\n\r\n    const classes = useStyles();\r\n    return(\r\n        <footer className= {classes.footer}>\r\n        <div>\r\n            Made by <a href=\"https://github.com/YourTechAngels\">YourTechAngels</a>\r\n        </div>\r\n        </footer>\r\n    )  \r\n}\r\n\r\n\r\nexport default Footer;","import React, { useState, useRef } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport AlertTitle from '@material-ui/lab/AlertTitle';\r\nimport Box from \"@material-ui/core/Box\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {\"Copyright © \"}\r\n            <Link color=\"inherit\" to=\"https://material-ui.com/\">\r\n                Your Website\r\n    </Link>{\" \"}\r\n            {new Date().getFullYear()}\r\n            {\".\"}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: \"100%\", \r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nexport default function SignIn() {\r\n    const classes = useStyles();\r\n    const param = useParams();\r\n    const user = param.userType;\r\n    const emailRef = useRef()\r\n    const passwordRef = useRef()\r\n    const { login } = useAuth()\r\n    const [error, setError] = useState(\"\")\r\n    const [loading, setLoading] = useState(false)\r\n    const history = useHistory()\r\n    const nameLabel = (`${user}`==='AssistanceRequester'? 'Requestee': `${user}`)\r\n  \r\n    async function handleSubmit(e) {\r\n      e.preventDefault()\r\n  \r\n      try {\r\n        setError(\"\")\r\n        setLoading(true)\r\n        await login(emailRef.current.value, passwordRef.current.value)\r\n\r\n        if (`${user}` === 'Volunteer')\r\n        { history.push(\"/myTask\");\r\n          console.log(process.env.PUBLIC_URL) }\r\n        else {\r\n            history.push(\"/addTask\") }\r\n        }\r\n     catch {\r\n        setError(\"Failed to log in\")\r\n      }\r\n  \r\n      setLoading(false)\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                   {nameLabel} Sign in\r\n                </Typography>\r\n            { error && <Alert severity=\"error\">\r\n            <AlertTitle>Error: {error}</AlertTitle>\r\n            </Alert>}\r\n                <form onSubmit={handleSubmit}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        type=\"email\" \r\n                        inputRef={emailRef} \r\n                        id=\"email\"\r\n                        label=\"Email Address\"\r\n                        autoFocus\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        type=\"password\" \r\n                        inputRef={passwordRef}\r\n                        label=\"Password\"\r\n                        id=\"password\"\r\n                    />\r\n                    <FormControlLabel\r\n                        control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                        label=\"Remember me\"\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled = {loading}\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <Link to={`/forgotPassword/${user}`} variant=\"body2\">\r\n                                Forgot password?\r\n                            </Link>\r\n                        </Grid>\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <div  className=\"w-100 text-center mt-2\">\r\n                            New User ?<Link to={`/signUp/${user}`} variant=\"body2\">\r\n                                Sign Up </Link> \r\n                            </div>\r\n                        </Grid>\r\n                     </Grid></Grid>\r\n                </form>\r\n            </div>\r\n            <Box mt={8}>\r\n                <Copyright />\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\n","import React, {useRef, useState } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport AlertTitle from '@material-ui/lab/AlertTitle';\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { useAuth } from \"../../contexts/AuthContext\"\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {\"Copyright © \"}\r\n            <Link color=\"inherit\" to=\"https://material-ui.com/\">\r\n                Your Website\r\n    </Link>{\" \"}\r\n            {new Date().getFullYear()}\r\n            {\".\"}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: \"100%\", \r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\n\r\nexport default function Signup() {\r\n  const emailRef = useRef()\r\n  const passwordRef = useRef()\r\n  const passwordConfirmRef = useRef()\r\n  const { signup } = useAuth()\r\n  const [error, setError] = useState(\"\")\r\n  const [loading, setLoading] = useState(false)\r\n  const history = useHistory()\r\n  const classes = useStyles();\r\n  const param = useParams();\r\n  const user = param.user;\r\n  \r\n\r\n    async function handleSubmit(e) {\r\n    e.preventDefault()\r\n    console.log(emailRef.current.value,passwordRef.current.value, passwordConfirmRef.current.value)\r\n\r\n    if (passwordRef.current.value !== passwordConfirmRef.current.value) {\r\n      return setError(\"Passwords does not match\")\r\n    }\r\n\r\n    try {\r\n      setError(\"\")\r\n      setLoading(true)\r\n      await signup(emailRef.current.value, passwordRef.current.value)\r\n      history.push(`/registrationPage/${user}`)\r\n    } catch {\r\n      setError(\"Failed to create an account\")\r\n    }\r\n\r\n    setLoading(false)  \r\n   \r\n}\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n            <Avatar className={classes.avatar}>\r\n                <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n                Sign Up\r\n           </Typography>\r\n           { error && <Alert severity=\"error\">\r\n            <AlertTitle>Error: {error}</AlertTitle>\r\n            </Alert>}\r\n           <form onSubmit={handleSubmit} > \r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    type=\"email\" \r\n                    inputRef={emailRef} \r\n                    id=\"email\"\r\n                    label=\"Email Address\"\r\n                    autoFocus\r\n                />\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    type=\"password\" \r\n                    inputRef={passwordRef}\r\n                    label=\"Password\"\r\n                    id=\"password\"\r\n                />\r\n                 <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    type=\"password\" \r\n                    inputRef={passwordConfirmRef}\r\n                    label=\"Confirm Password\"\r\n                    id=\"passwordConfirm\"\r\n                />\r\n                        <Button\r\n                                type=\"submit\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                disabled = {loading}\r\n                                color=\"primary\"\r\n                            >Sign Up\r\n                    </Button>\r\n              </form>\r\n              </div>  <Box mt={8}>\r\n                <Copyright />\r\n            </Box>\r\n        </Container>\r\n  )\r\n}","import React, { useRef, useState } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport AlertTitle from '@material-ui/lab/AlertTitle';\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {\"Copyright © \"}\r\n            <Link color=\"inherit\" to=\"https://material-ui.com/\">\r\n                Your Website\r\n    </Link>{\" \"}\r\n            {new Date().getFullYear()}\r\n            {\".\"}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: \"100%\", \r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\n\r\nexport default function ForgotPassword() {\r\n\r\n  const classes = useStyles();  \r\n  const emailRef = useRef()\r\n  const { resetPassword } = useAuth()\r\n  const [error, setError] = useState(\"\")\r\n  const [message, setMessage] = useState(\"\")\r\n  const [loading, setLoading] = useState(false)\r\n  const param = useParams();\r\n  const user = param.user;\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault()\r\n\r\n    try {\r\n      setMessage(\"\")\r\n      setError(\"\")\r\n      setLoading(true)\r\n      await resetPassword(emailRef.current.value)\r\n      setMessage(\"Check your inbox for password reset instructions\")\r\n    } catch {\r\n      setError(\"Failed to reset password\")\r\n    }\r\n\r\n    setLoading(false)\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n            <Avatar className={classes.avatar}>\r\n                <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\"> Forgot Password </Typography>\r\n            { error && <Alert severity=\"error\">\r\n            <AlertTitle>Error: {error}</AlertTitle>\r\n            </Alert>}\r\n            { message && <Alert severity=\"success\">\r\n            <AlertTitle>{message}</AlertTitle>\r\n            </Alert>}\r\n            <form onSubmit={handleSubmit} > \r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    type=\"email\" \r\n                    inputRef={emailRef} \r\n                    id=\"email\"\r\n                    label=\"Email Address\"\r\n                    // autoFocus\r\n                />\r\n                <Button            \r\n                                type=\"submit\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                disabled = {loading}\r\n                                color=\"primary\"\r\n                            >Reset Password\r\n                </Button>\r\n              </form>\r\n             <Grid container>\r\n                        <Grid item xs>\r\n                            <div  className=\"w-100 text-center mt-2\">\r\n                            Go to <Link to={`/login/${user}`} variant=\"body2\">\r\n                                Sign In</Link> \r\n                            </div>\r\n                        </Grid>\r\n              </Grid>\r\n              <Grid container>          \r\n                        <Grid item xs>\r\n                            <div  className=\"w-100 text-center mt-3\">\r\n                            New User ?<Link to={`/signUp/${user}`} variant=\"body2\">\r\n                                Sign Up </Link> \r\n                            </div>\r\n                        </Grid>\r\n                       \r\n        </Grid>\r\n\r\n    </div>  <Box mt={8}>\r\n    <Copyright />\r\n</Box>\r\n</Container>\r\n)\r\n}","import React,{useState} from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { useParams } from \"react-router-dom\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport AlertTitle from '@material-ui/lab/AlertTitle';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from \"@material-ui/core/Button\";\r\n// import AddressForm from './AddressForm';\r\nimport { ButtonGroup } from '@material-ui/core';\r\n\r\n\r\nconst useStyles = {\r\n  textFld: { width: '85%', height: 40, paddingLeft: 8 } , \r\n  button: {\r\n    border: '4px',\r\n    fontWeight: 'bold',\r\n    marginLeft: 10,\r\n    marginTop: '10px',\r\n  },\r\n  \r\n  };\r\n\r\n  export default function RegistrationPage(props) {\r\n\r\n    const initialInputState = { firstName : \"\" , lastName:\"\" , DateOfBirth:\"\", \r\n                                postcode:\"\", address1:\"\", address2:\"\", city:\"\" , county:\"\" }     \r\n    const [formData, setFormData] = useState({initialInputState})\r\n    const { firstName , lastName, DateOfBirth, postcode, address1, address2, city, county } = formData\r\n    const [message, setMessage] = useState(\"\")\r\n    \r\n\r\n    const handleChange= (e) => {\r\n      setFormData({...formData,[e.target.name]: e.target.value});\r\n    }\r\n\r\n\r\n    const handleSubmit = (evt) => {\r\n        evt.preventDefault();\r\n        setMessage(\"Data has been saved successfully\")\r\n         \r\n      console.log(formData)\r\n      }\r\n\r\n      const param = useParams();\r\n      const user  = param.user;\r\n                \r\n   return (\r\n     \r\n   <React.Fragment>\r\n     \r\n      <h2 align=\"center\"> Registration form</h2>\r\n      { message && <Alert severity=\"success\">\r\n            <AlertTitle>{message}</AlertTitle>\r\n            </Alert>}\r\n      <Grid container flex-start=\"left\" >\r\n      <p style={{paddingLeft:8}}>Please enter your details here</p> </Grid>\r\n     \r\n      <form onSubmit={handleSubmit} >      \r\n      <Grid container spacing={3} >\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            required\r\n            id=\"firstName\"\r\n            type =\"text\"\r\n            name=\"firstName\"\r\n            label=\"First name\"\r\n            variant=\"outlined\"\r\n            onChange = { handleChange }\r\n            value= {firstName || ''}\r\n            style = {useStyles.textFld}\r\n            autoComplete=\"given-name\"\r\n          />\r\n        </Grid>\r\n         <Grid item xs={12} sm={6} >\r\n          <TextField\r\n            required\r\n            id=\"lastName\"\r\n            name=\"lastName\"\r\n            type =\"text\"\r\n            label=\"Last name\"\r\n            onChange = { handleChange }\r\n            value= {lastName || ''}\r\n            variant=\"outlined\"\r\n            style = {useStyles.textFld}\r\n            autoComplete=\"family-name\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            id=\"DateOfBirth\"\r\n            name=\"DateOfBirth\"\r\n            type= \"date\"\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            label=\"Date Of Birth\"\r\n            onChange = { handleChange }\r\n            value= {DateOfBirth || ''}\r\n            variant=\"outlined\"\r\n            style = {useStyles.textFld}\r\n          />\r\n        </Grid>\r\n        \r\n        <Grid item xs={12} sm={12}> \r\n        <ButtonGroup>     \r\n         <TextField\r\n            required\r\n            id=\"postcode\"\r\n            name=\"postcode\"\r\n            label=\"Post code\"\r\n            variant=\"outlined\"\r\n            onChange = { handleChange }\r\n            value= {postcode || ''}\r\n            style = {useStyles.textFld}\r\n            autoComplete=\" postal-code\"/>\r\n        \r\n          <Grid item xs={12} sm={6}>            \r\n            <Button variant=\"outlined\" className = \"btn btn-secondary w-100\" onClick={() => { console.log('Find Address button clicked') }}>Find Address</Button>\r\n        </Grid></ButtonGroup>  </Grid> \r\n   \r\n        <Grid item xs={12}>\r\n          <TextField\r\n            required\r\n            id=\"address1\"\r\n            name=\"address1\"\r\n            onChange = { handleChange }\r\n            value= {address1 || ''}\r\n            label=\"Address line 1\"\r\n            variant=\"outlined\"\r\n            style = {useStyles.textFld}\r\n            autoComplete=\"address-line1\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            id=\"address2\"\r\n            name=\"address2\"\r\n            label=\"Address line 2\"\r\n            variant=\"outlined\"\r\n            onChange = { handleChange }\r\n            value= {address2 || ''}\r\n            style = {useStyles.textFld}\r\n            autoComplete=\"address-line2\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            required\r\n            id=\"city\"\r\n            name=\"city\"\r\n            label=\"City\"\r\n            onChange = { handleChange }\r\n            value= {city || ''}\r\n            variant=\"outlined\"\r\n            style = {useStyles.textFld}\r\n            autoComplete=\"address-level2\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n           id=\"county\" \r\n           name=\"county\"  \r\n           variant=\"outlined\" \r\n           onChange = { handleChange }\r\n           value= {county || ''}\r\n           style = {useStyles.textFld}\r\n           label=\"County\" />\r\n        </Grid>\r\n               \r\n        <Grid item xs={12}>\r\n         \r\n         { (`${user}` === 'Volunteer') && \r\n          <FormControlLabel\r\n            control={<Checkbox color=\"secondary\" style = {{ marginLeft: '5px' }} name=\"dbsCheck\" value=\"yes\" />}\r\n            label=\"I have a valid DBS certificate\"\r\n          /> }  \r\n\r\n        </Grid>\r\n        <Grid item xs={12} align=\"center\">\r\n\r\n        <Button variant = \"contained\"  className = \"btn btn-primary w-100\" type=\"submit\">Submit</Button>\r\n        </Grid>\r\n        </Grid>\r\n        </form>\r\n    </React.Fragment>   \r\n  \r\n)}","import Button from \"@material-ui/core/Button\";\r\nimport {\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n} from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nimport { TextField } from '@material-ui/core';\r\n\r\n\r\n\r\nconst useStyles = theme => ({\r\n    textFld: { width: '85%', height: 40, paddingLeft: 8 } , \r\n    button: {\r\n      border: '4px',\r\n      color: \"default\",\r\n      fontWeight: 'bold',\r\n      marginLeft: 10,\r\n      marginTop: '10px',\r\n    },\r\n    form: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        margin: 'auto',\r\n        width: 'fit-content',\r\n      },\r\n    \r\n    });\r\n\r\nconst TaskDialog = ({ open, handleClose, title, data }) => {\r\n    const theme = useTheme();\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n    console.log(data);\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                fullScreen={fullScreen}\r\n                aria-labelledby=\"responsive-dialog-title\"\r\n            >\r\n                <DialogTitle>{title}</DialogTitle>\r\n                <DialogContent>\r\n                <form className={useStyles.form} noValidate>\r\n                        {data && (\r\n                            <Grid container spacing={3}>\r\n                                 {data.firstName} {data.lastName}\r\n                                <Grid item xs={12} sm={12} >\r\n                                <TextField id=\"taskType\" type=\"string\" label=\"Task\" value={data.taskType}  variant=\"outlined\"\r\n                                style = {useStyles.textFld}\r\n                                autoComplete=\"family-name\" />\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={12} >\r\n                                <TextField id=\"taskSummary\" type=\"string\" label=\"Task Summary\" value={data.taskSummary}  variant=\"outlined\"\r\n                                multiline\r\n                                rows={6}\r\n                                style = {useStyles.textFld}\r\n                                autoComplete=\"family-name\" />\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6} >\r\n                                    \r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6} >\r\n                                    \r\n                                </Grid>\r\n                            </Grid>\r\n                        )}\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={handleClose} color=\"primary\">\r\n                        Close\r\n          </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskDialog;\r\n","import { Snackbar, makeStyles } from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        top: theme.spacing(15),\r\n    },\r\n}));\r\n\r\nfunction Notification(props) {\r\n    const classes = useStyles();\r\n    const { notify, setNotify } = props;\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === \"clickaway\") {\r\n            return;\r\n        }\r\n        setNotify({\r\n            ...notify,\r\n            isOpen: false,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Snackbar\r\n            className={classes.root}\r\n            open={notify.isOpen}\r\n            autoHideDuration={2000}\r\n            anchorOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n            onClose={handleClose}\r\n        >\r\n            <Alert severity={notify.type} onClose={handleClose}>\r\n                {notify.message}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n\r\nexport default Notification;\r\n","import {\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    makeStyles,\r\n} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    dailog: {\r\n        padding: theme.spacing(2),\r\n        position: \"absolute\",\r\n        top: theme.spacing(15),\r\n    },\r\n    dailogContent: {\r\n        textAlign: \"center\",\r\n    },\r\n    dailogAction: {\r\n        justifyContent: \"center\",\r\n    }\r\n\r\n}));\r\n\r\nconst ConfirmDailog = (props) => {\r\n    const classes = useStyles();\r\n    const { confirmDialog, setConfirmDialog } = props;\r\n\r\n    return (\r\n        <Dialog open={confirmDialog.isOpen}\r\n            className={classes.dailog}>\r\n            <DialogTitle>\r\n                <Typography variant=\"h6\">{confirmDialog.title}</Typography>\r\n            </DialogTitle>\r\n            <DialogContent className={classes.dailogContent}>\r\n                <Typography variant=\"subtitle2\">{confirmDialog.subTitle}</Typography>\r\n            </DialogContent>\r\n            <DialogActions className={classes.dailogAction}>\r\n                <Button variant=\"contained\"\r\n                    // color=\"secondary\"\r\n                    size=\"small\"\r\n                    style={{ minWidth: '90px' }}\r\n                    onClick={confirmDialog.onConfirm}\r\n                >\r\n                    OK\r\n        </Button>\r\n                <Button variant=\"contained\"\r\n                    // color=\"primary\"\r\n                    size=\"small\"\r\n                    style={{ minWidth: '90px' }}\r\n                    onClick={() => setConfirmDialog({ ...ConfirmDailog, isOpen: false })}\r\n                >\r\n                    Cancel\r\n        </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\n\r\nexport default ConfirmDailog;","import React from \"react\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport moment from \"moment\";\r\nimport { useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { createMuiTheme, MuiThemeProvider } from \"@material-ui/core/styles\"; //not working\r\nimport TaskDialog from \"./TaskDetail\";\r\nimport Notification from \"./Notification\";\r\nimport ConfirmDailog from \"./CofirmDailog\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst SPACED_DATE_FORMAT = \"DD MMM YYYY\";\r\n\r\nconst options = {\r\n    filterType: \"multiselect\",\r\n    selectableRows: \"none\", //can also be single/mulitple\r\n    selectableRowsOnClick: true,\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    h5: {\r\n        color: \"#4C4B51\",\r\n        textAlign: \"center\",\r\n    },\r\n}));\r\n\r\nconst intialTasks = [\r\n    {\r\n        id: 1,\r\n        lastName: \"Snow\",\r\n        firstName: \"Jon\",\r\n        taskType: \"Shopping\",\r\n        taskSummary: \"I need help with Shopping from Tesco\",\r\n        date: \"2020-12-28\",\r\n        distance: 1,\r\n        volId: 1,\r\n    },\r\n    {\r\n        id: 2,\r\n        lastName: \"Lannister\",\r\n        firstName: \"Cersei\",\r\n        taskType: \"Dog Walking\",\r\n        taskSummary: \"I need help with dog walkingevery morning and afternoon\",\r\n        date: \"2021-01-20\",\r\n        distance: 1,\r\n        volId: 1,\r\n    },\r\n    {\r\n        id: 3,\r\n        lastName: \"Lannister\",\r\n        firstName: \"Jaime\",\r\n        taskType: \"Shopping\",\r\n        taskSummary: \"I need help with Shopping from Asda\",\r\n        date: \"2021-01-28\",\r\n        distance: 2.3,\r\n        volId: null,\r\n    },\r\n    {\r\n        id: 4,\r\n        lastName: \"Stark\",\r\n        firstName: \"Arya\",\r\n        taskType: \"Pharmacy\",\r\n        taskSummary: \"I need help with picking up my prescription from local gp\",\r\n        date: \"2021-03-20\",\r\n        distance: 0.8,\r\n        volId: null,\r\n    },\r\n    {\r\n        id: 5,\r\n        lastName: \"Targaryen\",\r\n        firstName: \"Daenerys\",\r\n        taskType: \"Hospital\",\r\n        taskSummary: \"I need help to drop off and pick up from my hospital\",\r\n        date: \"2021-01-10\",\r\n        distance: 2,\r\n        volId: null,\r\n    },\r\n    {\r\n        id: 6,\r\n        lastName: \"Melisandre\",\r\n        firstName: null,\r\n        taskType: \"Phone Call\",\r\n        taskSummary: \"I need someone to give me a call to have a chat\",\r\n        date: \"2021-01-20\",\r\n        distance: 5,\r\n        volId: null,\r\n    },\r\n    {\r\n        id: 7,\r\n        lastName: \"Clifford\",\r\n        firstName: \"Ferrara\",\r\n        taskType: \"Shopping\",\r\n        taskSummary: \"I need help with Shopping from Tesco\",\r\n        date: \"2021-01-20\",\r\n        distance: 4,\r\n        volId: null,\r\n    },\r\n    {\r\n        id: 8,\r\n        lastName: \"Frances\",\r\n        firstName: \"Rossini\",\r\n        taskType: \"Other\",\r\n        taskSummary: \"I need help with mowing my garden\",\r\n        date: \"2021-01-20\",\r\n        distance: 2,\r\n        volId: null,\r\n    },\r\n    {\r\n        id: 9,\r\n        lastName: \"Roxie\",\r\n        firstName: \"Harvey\",\r\n        taskType: \"Shopping\",\r\n        taskSummary: \"I need help with Shopping from Sainsbuyrys\",\r\n        date: \"2021-01-20\",\r\n        distance: 3,\r\n        volId: null,\r\n    },\r\n    {\r\n        id: 10,\r\n        lastName: \"Indra\",\r\n        firstName: \"Thapa\",\r\n        taskType: \"Medical\",\r\n        taskSummary: \"I need help with picking up my prescription\",\r\n        date: \"2021-01-20\",\r\n        distance: 3,\r\n        volId: null,\r\n    },\r\n    {\r\n        id: 11,\r\n        lastName: \"Paanas\",\r\n        firstName: \"Thapa\",\r\n        taskType: \"Medical\",\r\n        taskSummary: \"I need help with picking up my prescription\",\r\n        date: \"2021-01-20\",\r\n        distance: 3,\r\n        volId: null,\r\n    },\r\n    {\r\n        id: 12,\r\n        lastName: \"Paanas\",\r\n        firstName: \"Thapa\",\r\n        taskType: \"Medical\",\r\n        taskSummary: \"I need help with picking up my prescription\",\r\n        date: \"2021-01-20\",\r\n        distance: 3,\r\n        volId: null,\r\n    },\r\n    {\r\n        id: 13,\r\n        lastName: \"Kate\",\r\n        firstName: \"Middleton\",\r\n        taskType: \"Medical\",\r\n        taskSummary: \"I need help with picking up my prescription\",\r\n        date: \"2021-01-20\",\r\n        distance: 3,\r\n        volId: null,\r\n    },\r\n    {\r\n        id: 14,\r\n        lastName: \"Joe\",\r\n        firstName: \"Kelly\",\r\n        taskType: \"Shopping\",\r\n        taskSummary: \"I need help with Shopping from Tesco\",\r\n        date: \"2021-01-20\",\r\n        distance: 4,\r\n        volId: null,\r\n    },\r\n    {\r\n        id: 15,\r\n        lastName: \"Frances\",\r\n        firstName: \"Rai\",\r\n        taskType: \"Other\",\r\n        taskSummary: \"I need help with mowing my garden\",\r\n        date: \"2021-01-20\",\r\n        distance: 2,\r\n        volId: null,\r\n    },\r\n    {\r\n        id: 16,\r\n        lastName: \"Roxie\",\r\n        firstName: \"Raymond\",\r\n        taskType: \"Shopping\",\r\n        taskSummary: \"I need help with Shopping from Sainsbuyrys\",\r\n        date: \"2021-01-20\",\r\n        distance: 3,\r\n        volId: null,\r\n    },\r\n];\r\n\r\nexport default function VolunteerSearchTask() {\r\n    const classes = useStyles();\r\n\r\n    const theme = createMuiTheme({\r\n        overrides: {\r\n            MuiDataTable: {\r\n                root: {\r\n                    width: \"min-content\",\r\n                },\r\n                responsiveScroll: {\r\n                    maxHeight: \"none\", //not working\r\n                },\r\n            },\r\n            MUIDataTableBodyCell: {\r\n                root: {\r\n                    backgroundColor: \"#FFF\",\r\n                    width: \"90px\",\r\n                },\r\n            },\r\n        },\r\n    });\r\n\r\n    const [pendingTasks, setPendingTasks] = useState(intialTasks);\r\n    const myTasks = pendingTasks.filter(\r\n        (task) => task.volId !== null && task.volId === 1\r\n    );\r\n    const unassignedTasks = pendingTasks.filter((task) => task.volId === null);\r\n\r\n    const [showDialog, setShowDialog] = React.useState(false);\r\n    const [dialogData, setDialogData] = React.useState(null);\r\n    const [notifyMsg, setNotifyMsg] = useState({\r\n        isOpen: false,\r\n        message: \" \",\r\n        type: \" \",\r\n    });\r\n    const [confirmDailog, setConfirmDialog] = useState({\r\n        isOpen: false,\r\n        title: \"\",\r\n        subTitle: \"\",\r\n    });\r\n\r\n    const handleClickOpen = (e, dialogData) => {\r\n        setShowDialog(true);\r\n        setDialogData(dialogData);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setShowDialog(false);\r\n        setDialogData(null);\r\n    };\r\n\r\n    const myTaskCols = [\r\n        {\r\n            name: \"id\",\r\n            label: \"ID\",\r\n            options: {\r\n                display: false,\r\n                sort: false,\r\n                filter: false,\r\n                viewColumns: false,\r\n            },\r\n        },\r\n        {\r\n            name: \"volId\",\r\n            label: \"volunteer ID\",\r\n            viewColumns: false,\r\n            options: { display: false, sort: false, filter: false },\r\n        },\r\n        {\r\n            name: \"firstName\",\r\n            label: \"First name\",\r\n          \r\n            options: {\r\n                display: false, \r\n                filter: true,\r\n                sort: true,\r\n            },\r\n        },\r\n        {\r\n            name: \"lastName\",\r\n            label: \"Last name\",\r\n\r\n            options: {\r\n                display: false, \r\n                filter: true,\r\n                sort: true,\r\n            },\r\n        },    \r\n        {\r\n            name: \"firstName\",\r\n            label: \"Full Name\",\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                    //console.log(tableMeta.rowData, '......');\r\n                    return (\r\n                        <div>{tableMeta.rowData[2]} {tableMeta.rowData[3]}</div>\r\n                    );\r\n                }\r\n            }\r\n        },\r\n        {\r\n            name: \"taskType\",\r\n            label: \"Task\",\r\n\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n            },\r\n        },\r\n        {\r\n            name: \"date\",\r\n            label: \"Start Date\",\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (value) =>\r\n                    moment(new Date(value)).format(SPACED_DATE_FORMAT),\r\n            },\r\n        },\r\n        {\r\n            name: \"distance\",\r\n            label: \"Distance\",\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n            },\r\n        },\r\n        // { name: \"startTime\", label: \"Start Time\", width: 100, type: \"time\" },\r\n        //  { name: \"endTime\", label: \"End Time\", width: 100, type: \"time\" },\r\n      \r\n        {\r\n            name: \"id\",\r\n            label: \"Action\",\r\n\r\n            options: {\r\n                sort: false,\r\n                filter: false,\r\n                viewColumns: false,\r\n                display: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            disabled={tableMeta.rowData[1] === null ? false : true}\r\n                            style={{\r\n                                marginLeft: 2,\r\n                                backgroundColor:\r\n                                    tableMeta.rowData[1] === null ? \"green\" : \"lightgrey\",\r\n                            }}\r\n                            className=\"button\"\r\n                            value={value}\r\n                            onClick={() => {\r\n                                //console.log(tableMeta.rowData[1]);\r\n                                setConfirmDialog({\r\n                                    isOpen: true,\r\n                                    title: \"Do you agree to accept this task?\",\r\n                                    subTitle:\r\n                                        \"Once accepted it will be assigned to you.To return the task you need to go to your task list and reject it.\",\r\n                                    onConfirm: () => {\r\n                                        setConfirmDialog({\r\n                                            ...confirmDailog,\r\n                                            isOpen: false,\r\n                                        });\r\n\r\n                                        //const assignTask = unassignedTasks.map((task) =>\r\n                                        const assignTask = intialTasks.map((task) =>\r\n                                            task.id === value ? { ...task, volId: 1 } : task\r\n                                        );\r\n                                        setPendingTasks(assignTask);\r\n                                        console.log(\"assignTasks\")\r\n                                        console.log(unassignedTasks)\r\n                                        console.log(\"myTask\")\r\n                                        console.log(myTasks)                                        \r\n                                        console.log(pendingTasks)\r\n\r\n                                        setNotifyMsg({\r\n                                            isOpen: true,\r\n                                            message: \"Task is successfully assigned to you.\",\r\n                                            type: \"success\",\r\n                                        });\r\n                                    },\r\n                                });\r\n                            }}\r\n                        >\r\n                            Accept\r\n                        </Button>\r\n                    );\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: \"id\",\r\n            label: \"Action\",\r\n\r\n            options: {\r\n                sort: false,\r\n                filter: false,\r\n                viewColumns: false,\r\n                display:  true,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            size=\"small\"\r\n                            disabled={tableMeta.rowData[1] === null ? true : false}\r\n                            style={{ marginLeft: 2 }}\r\n                            className=\"button\"\r\n                            value={value}\r\n                            onClick={() => {\r\n                                \r\n                                setConfirmDialog({\r\n                                    isOpen: true,\r\n                                    title: \"Are you sure to return your assigned Task?\",\r\n                                    subTitle:\r\n                                        \"Once rejected it will be unassigned from you.To reassign the task you need to go to search task and accept it again.\",\r\n                                    onConfirm: () => {\r\n                                        setConfirmDialog({\r\n                                            ...confirmDailog,\r\n                                            isOpen: false,\r\n                                        });\r\n                                        console.log(tableMeta.rowData[1]);\r\n\r\n                                        //const returnTask = myTasks.map((task) =>\r\n                                        const returnTask = intialTasks.map((task) =>\r\n                                            task.id === value ? { ...task, volId: null } : task\r\n                                        );\r\n                                        setPendingTasks(returnTask);\r\n                                        console.log(\"myTask\")\r\n                                        console.log(myTasks) \r\n                                        console.log(\"assignTasks\")\r\n                                        console.log(unassignedTasks)                                                                              \r\n                                        console.log(pendingTasks)\r\n\r\n                                        setNotifyMsg({\r\n                                            isOpen: true,\r\n                                            message: \"Task is unssigned from you\",\r\n                                            type: \"warning\",\r\n                                        });\r\n                                    },\r\n                                });\r\n                            }}\r\n                        >\r\n                            Reject\r\n                        </Button>\r\n                    );\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: \"id\",\r\n            label: \" Task Detail\",\r\n\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                viewColumns: false,\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                    return (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            style={{ marginLeft: 16 }}\r\n                            value={value}\r\n                            onClick={(e) => {\r\n                                const selectedTask = pendingTasks.find(\r\n                                    (task) => task.id === value\r\n                                );\r\n                                console.log(selectedTask);\r\n                                if (selectedTask != null) {\r\n                                    handleClickOpen(e, selectedTask);\r\n                                }\r\n                            }}\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    );\r\n                },\r\n            },\r\n        },\r\n\r\n    ];\r\n\r\n    const unassignedTaskCols = [\r\n        {\r\n            name: \"id\",\r\n            label: \"ID\",\r\n            options: {\r\n                display: false,\r\n                sort: false,\r\n                filter: false,\r\n                viewColumns: false,\r\n            },\r\n        },\r\n        {\r\n            name: \"volId\",\r\n            label: \"volunteer ID\",\r\n            options: { display: false, sort: false, filter: false },\r\n        },\r\n        {\r\n            name: \"firstName\",\r\n            label: \"First name\",\r\n            options: {\r\n                display: false, \r\n                filter: true,\r\n                sort: true,\r\n            },\r\n        },\r\n        {\r\n            name: \"lastName\",\r\n            label: \"Last name\",\r\n            options: {\r\n                display: false, \r\n                filter: true,\r\n                sort: true,\r\n            },\r\n        },\r\n        {\r\n            name: \"firstName\",\r\n            label: \"Full Name\",\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                    //console.log(tableMeta.rowData, '......');\r\n                    return (\r\n                        <div>{tableMeta.rowData[2]} {tableMeta.rowData[3]}</div>\r\n                    );\r\n                }\r\n            }\r\n        },\r\n        {\r\n            name: \"taskType\",\r\n            label: \"Task\",\r\n\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n            },\r\n        },\r\n        {\r\n            name: \"date\",\r\n            label: \"Start Date\",\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                customBodyRender: (value) =>\r\n                    moment(new Date(value)).format(SPACED_DATE_FORMAT),\r\n            },\r\n        },\r\n        {\r\n            name: \"distance\",\r\n            label: \"Distance\",\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n            },\r\n        },\r\n        // { name: \"startTime\", label: \"Start Time\", width: 100, type: \"time\" },\r\n        //  { name: \"endTime\", label: \"End Time\", width: 100, type: \"time\" },      \r\n        {\r\n            name: \"id\",\r\n            label: \"Action\",\r\n\r\n            options: {\r\n                sort: false,\r\n                filter: false,\r\n                viewColumns: false,\r\n                display: true,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            disabled={tableMeta.rowData[1] === null ? false : true}\r\n                            style={{\r\n                                marginLeft: 2,\r\n                                backgroundColor:\r\n                                    tableMeta.rowData[1] === null ? \"green\" : \"lightgrey\",\r\n                            }}\r\n                            className=\"button\"\r\n                            value={value}\r\n                            onClick={() => {\r\n                                //console.log(tableMeta.rowData[1]);\r\n                                setConfirmDialog({\r\n                                    isOpen: true,\r\n                                    title: \"Do you agree to accept this task?\",\r\n                                    subTitle:\r\n                                        \"Once accepted it will be assigned to you.To return the task you need to go to your task list and reject it.\",\r\n                                    onConfirm: () => {\r\n                                        setConfirmDialog({\r\n                                            ...confirmDailog,\r\n                                            isOpen: false,\r\n                                        });\r\n\r\n                                       // const assignTask = unassignedTasks.map((task) =>\r\n                                       const assignTask = intialTasks.map((task) =>\r\n                                            task.id === value ? { ...task, volId: 1 } : task\r\n                                        );\r\n                                        setPendingTasks(assignTask);\r\n                                        console.log(\"assignTasks\")\r\n                                        console.log(unassignedTasks)\r\n                                        console.log(\"myTask\")\r\n                                        console.log(myTasks)                                        \r\n                                        console.log(pendingTasks)\r\n                                        setNotifyMsg({\r\n                                            isOpen: true,\r\n                                            message: \"Task is successfully assigned to you.\",\r\n                                            type: \"success\",\r\n                                        });\r\n                                    },\r\n                                });\r\n                            }}\r\n                        >\r\n                            Accept\r\n                        </Button>\r\n                    );\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: \"id\",\r\n            label: \"Action\",\r\n\r\n            options: {\r\n                sort: false,\r\n                filter: false,\r\n                viewColumns: false,\r\n                display: false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            size=\"small\"\r\n                            disabled={tableMeta.rowData[1] === null ? true : false}\r\n                            style={{ marginLeft: 2 }}\r\n                            className=\"button\"\r\n                            value={value}\r\n                            onClick={() => {\r\n                                \r\n                                setConfirmDialog({\r\n                                    isOpen: true,\r\n                                    title: \"Are you sure to return your assigned Task?\",\r\n                                    subTitle:\r\n                                        \"Once rejected it will be unassigned from you.To reassign the task you need to go to search task and accept it again.\",\r\n                                    onConfirm: () => {\r\n                                        setConfirmDialog({\r\n                                            ...confirmDailog,\r\n                                            isOpen: false,\r\n                                        });\r\n                                        console.log(tableMeta.rowData[1]);\r\n\r\n                                        //const returnTask = myTasks.map((task) =>\r\n                                        const returnTask = intialTasks.map((task) =>\r\n                                            task.id === value ? { ...task, volId: null } : task\r\n                                        );\r\n                                        setPendingTasks(returnTask);\r\n\r\n                                        setNotifyMsg({\r\n                                            isOpen: true,\r\n                                            message: \"Task is unssigned from you\",\r\n                                            type: \"warning\",\r\n                                        });\r\n                                    },\r\n                                });\r\n                            }}\r\n                        >\r\n                            Reject\r\n                        </Button>\r\n                    );\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: \"id\",\r\n            label: \" Task Detail\",\r\n\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                viewColumns: false,\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                    return (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            style={{ marginLeft: 16 }}\r\n                            value={value}\r\n                            onClick={(e) => {\r\n                                const selectedTask = pendingTasks.find(\r\n                                    (task) => task.id === value\r\n                                );\r\n                                console.log(selectedTask);\r\n                                if (selectedTask != null) {\r\n                                    handleClickOpen(e, selectedTask);\r\n                                }\r\n                            }}\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    );\r\n                },\r\n            },\r\n        },\r\n\r\n    ];\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <div style={{ height: \"100%\" }}>\r\n            <Grid id=\"start-time\" container spacing={2}>\r\n                <Grid item xs={12} sm={6}>\r\n                <h4 className={classes.h5}>\r\n                    {\"My Assigned Tasks\"}\r\n                </h4>\r\n\r\n                <MuiThemeProvider theme={theme}>\r\n                    <MUIDataTable\r\n                        title={\r\n                        \"My Task List\"\r\n                        }\r\n                        // data={pendingTasks}\r\n                        data={myTasks}\r\n                        columns={myTaskCols}\r\n                        options={options}\r\n                    />\r\n                </MuiThemeProvider>\r\n                \r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                <h4 className={classes.h5}>\r\n                    {\"Search New Tasks\"}\r\n                </h4>\r\n\r\n                <MuiThemeProvider theme={theme}>\r\n                    <MUIDataTable\r\n                        title={\r\n                            \"New Unassigned Task List\"\r\n                        }\r\n                        // data={pendingTasks}\r\n                        data={unassignedTasks}\r\n                        columns={unassignedTaskCols}\r\n                        options={options}\r\n                    />\r\n                </MuiThemeProvider>\r\n            \r\n                </Grid>\r\n            </Grid>\r\n            \r\n                <TaskDialog\r\n                    open={showDialog}\r\n                    handleClose={handleClose}\r\n                    title=\"Task Summary\"\r\n                    data={dialogData}\r\n                />\r\n                <Notification notify={notifyMsg} setNotify={setNotifyMsg} />\r\n                <ConfirmDailog\r\n                    confirmDialog={confirmDailog}\r\n                    setConfirmDialog={setConfirmDialog}\r\n                />\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport TextField from '@material-ui/core/TextField'\r\n// import Checkbox from '@material-ui/core/Checkbox'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport { useForm } from 'react-hook-form'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles({\r\n    p: { margin: \"10px 2px 10px 2px\" },\r\n})\r\n\r\nfunction FormDialog({ open, handleClose, taskType, addTask }) {\r\n\r\n    const dialogHeader = {\r\n        \"shop\": \"Shopping\",\r\n        \"pharm\": \"Collect medicine\",\r\n        \"dog\": \"Dog Walking\",\r\n        \"hospital\": \"Visit Hospital Appointment\",\r\n        \"phone\": \"Friendly Chat\",\r\n        \"any\": \"I need help with ...\",\r\n    }\r\n\r\n    const getFormDate = date => {\r\n        let year = date.getFullYear();\r\n        let month = (1 + date.getMonth()).toString().padStart(2, '0');\r\n        let day = date.getDate().toString().padStart(2, '0');\r\n        return year + '-' + month + '-' + day\r\n    }\r\n\r\n    const defaultValues = {\r\n        taskDetails: \"\",\r\n        startDate: null,\r\n        startTime: \"08:00\",\r\n        endDate: null,\r\n        endTime: \"20:00\"\r\n    };\r\n\r\n\r\n    const { register, handleSubmit, reset, errors, watch, setValue, clearErrors, control } =\r\n        useForm({ defaultValues: defaultValues, mode: \"all\" })\r\n\r\n    const resetAndClose = () => {\r\n        reset()\r\n        handleClose()\r\n    }\r\n\r\n    const onSubmit = (data) => {\r\n        const start = new Date(data.startDate + \"T\" + data.startTime)\r\n        const end = new Date(data.endDate + \"T\" + data.endTime)\r\n\r\n        addTask({\r\n            taskType: taskType, taskDetails: data.taskDetails,\r\n            start: start, end: end\r\n        })\r\n        resetAndClose()\r\n    };\r\n\r\n    const watchAll = watch()\r\n\r\n    // TODO Call through DB\r\n    // Minimum time needed to perform a task *in minutes*\r\n    const minDuration = 30\r\n\r\n    const validateTimes = () => {\r\n        const start = new Date(watchAll.startDate + \"T\" + watchAll.startTime)\r\n        const end = new Date(watchAll.endDate + \"T\" + watchAll.endTime)\r\n\r\n        if (!watchAll.startDate || !watchAll.startTime ||\r\n            !watchAll.endDate || !watchAll.endTime) {\r\n            clearErrors(\"endTime\")\r\n            return\r\n        }\r\n\r\n        const minEnd = start.setMinutes(start.getMinutes() + minDuration)\r\n        if (minEnd > end)\r\n            return \"Not enough time to complete your task. \" +\r\n                \"Consider at least \" + minDuration + \" minutes.\" \r\n    }\r\n\r\n    const handleStartDate = e => {\r\n        if (!e.target.value) return\r\n        if ((!watchAll.endDate) ||\r\n            (watchAll.endDate && (watchAll.endDate < e.target.value))) {\r\n            setValue(\"endDate\", e.target.value)\r\n        }\r\n    }\r\n\r\n    const handleEndDate = e => {\r\n        if (!e.target.value) return\r\n        if (watchAll.startDate && (watchAll.startDate > e.target.value)) {\r\n            setValue(\"startDate\", e.target.value)\r\n        }\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    const reqFieldMsg = \"Required field\"\r\n\r\n    return (\r\n        <div>\r\n            <Dialog open={open} onClose={resetAndClose} fullWidth maxWidth=\"sm\">\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <DialogTitle id=\"dialog-add-task\">\r\n                        {dialogHeader[taskType]}\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        < TextField\r\n                            id=\"taskDetails\"\r\n                            name=\"taskDetails\"\r\n                            inputRef={register({ required: [\"shop\", \"any\"].includes(taskType) })}\r\n                            autoFocus\r\n                            label=\"Details\"\r\n                            multiline\r\n                            rows={5}\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            error={errors.taskDetails}\r\n                            helperText={errors.taskDetails && \"Details are required for this task type\"}\r\n                        />\r\n\r\n                        <p className={classes.p}>\r\n                            <br />\r\n                            Set dates when you need it: < br />\r\n                            <Typography variant=\"caption\">\r\n                                Providing wider time window will increase your chances to find a volunteer.\r\n                            </ Typography >\r\n                        </p>\r\n\r\n                        <Grid id=\"start-time\" container spacing={3}>\r\n                            <Grid item xs={12} sm={6} >\r\n                                <TextField\r\n                                    inputRef={register({ required: reqFieldMsg })}\r\n                                    id=\"startDate\"\r\n                                    name=\"startDate\"\r\n                                    label=\"Starting from\"\r\n                                    type=\"date\"\r\n                                    margin=\"dense\"\r\n                                    fullWidth\r\n                                    inputProps={{ min: getFormDate(new Date()) }}\r\n                                    onChange={handleStartDate}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    error={errors.hasOwnProperty(\"startDate\")}\r\n                                    helperText={errors.startDate && errors.startDate.message}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    inputRef={register({ required: reqFieldMsg })}\r\n                                    type=\"time\"\r\n                                    id=\"startTime\"\r\n                                    name=\"startTime\"\r\n                                    label=\"Time\"\r\n                                    margin=\"dense\"\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    error={errors.hasOwnProperty(\"startTime\")}\r\n                                    helperText={errors.startTime && errors.startTime.message}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid id=\"finish-time\" container spacing={3}>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    inputRef={register({ required: reqFieldMsg })}\r\n                                    type=\"date\"\r\n                                    margin=\"dense\"\r\n                                    inputProps={{ min: getFormDate(new Date()) }}\r\n                                    id=\"endDate\"\r\n                                    name=\"endDate\"\r\n                                    label=\"Ending at\"\r\n                                    fullWidth\r\n                                    onChange={handleEndDate}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    error={errors.hasOwnProperty(\"endDate\")}\r\n                                    helperText={errors.endDate && errors.endDate.message}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    inputRef={register({\r\n                                        required: reqFieldMsg,\r\n                                        validate: validateTimes\r\n                                    })}\r\n                                    type=\"time\"\r\n                                    id=\"endTime\"\r\n                                    name=\"endTime\"\r\n                                    label=\"Time\"\r\n                                    margin=\"dense\"\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    error={errors.hasOwnProperty(\"endTime\")}\r\n                                    helperText={errors.endTime && errors.endTime.message}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        {/* TODO */}\r\n                        {/* <FormControlLabel disabled\r\n                            control={\r\n                                <Checkbox\r\n                                    name=\"dbsRequired\"\r\n                                    checked={false}\r\n                                />}\r\n                            label=\"Only volunteers with DBS certificate\"\r\n                        /> */}\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={resetAndClose} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button type=\"Submit\" color=\"primary\">\r\n                            Add\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FormDialog","import React from \"react\"\r\nimport MUIDataTable from \"mui-datatables\"\r\nimport Button from \"@material-ui/core/Button\"\r\n\r\n\r\nconst options = {\r\n    filterType: \"multiselect\",\r\n    selectableRows: \"none\", //can also be single/mulitple\r\n    selectableRowsOnClick: true,\r\n    count: 5,\r\n};\r\n\r\nexport default function TaskTable({taskList}) {\r\n    const columns = [\r\n        {\r\n            name: \"id\",\r\n            label: \"ID\",\r\n            options: { display: false, sort: false, filter: false },\r\n        },\r\n        {\r\n            name: \"taskType\",\r\n            label: \"Task Type\",\r\n\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n            },\r\n        },\r\n        {\r\n            name: \"taskDetails\",\r\n            label: \" Task Detail\",\r\n\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                // customBodyRender: (value, tableMeta, updateValue) => {\r\n                //     return (\r\n                //         <Button\r\n                //             variant=\"contained\"\r\n                //             color=\"primary\"\r\n                //             size=\"small\"\r\n                //             style={{ marginLeft: 16 }}\r\n                //             value={value}\r\n                //             onClick={(e) => handleClickOpen(e, value)}\r\n                //         >\r\n                //             View\r\n                //         </Button>\r\n                //     );\r\n                // },\r\n            },\r\n        },\r\n        {\r\n            name: \"start\",\r\n            label: \"Start Time\",\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n\r\n                // customBodyRender: (value) =>\r\n                //     moment(new Date(value)).format(SPACED_DATE_FORMAT),\r\n            },\r\n        },\r\n        {\r\n            name: \"end\",\r\n            label: \"End Time\",\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n\r\n                // customBodyRender: (value) =>\r\n                //     moment(new Date(value)).format(SPACED_DATE_FORMAT),\r\n            },\r\n        },\r\n        {\r\n            name: \"status\",\r\n            label: \"State\",\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n\r\n                // customBodyRender: (value) =>\r\n                //     moment(new Date(value)).format(SPACED_DATE_FORMAT),\r\n            },\r\n        },\r\n        {\r\n            name: \"actions\",\r\n            label: \"Actions\",\r\n\r\n            options: {\r\n                sort: false,\r\n                filter: false,\r\n                // customBodyRender: (value, tableMeta) => {\r\n                //     return (\r\n                //         <Button\r\n                //             variant=\"contained\"\r\n                //             color=\"primary\"\r\n                //             size=\"small\"\r\n                //             disabled={tableMeta.rowData[1] === null ? false : true}\r\n                //             style={{\r\n                //                 marginLeft: 16,\r\n                //                 backgroundColor:\r\n                //                     tableMeta.rowData[1] === null ? \"green\" : \"lightgrey\",\r\n                //             }}\r\n                //             className=\"button\"\r\n                //             value={value}\r\n                //             onClick={() => {\r\n                //                 console.log(tableMeta.rowData[1]);\r\n                        //     }}\r\n                        // >\r\n                        //     Accept\r\n                        // </Button>\r\n                //     );\r\n                // },\r\n            },\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {/* <div style={{ height: \"100%\" }}> */}\r\n                {/* <MuiThemeProvider theme={theme}> */}\r\n                    <MUIDataTable\r\n                        title=\"All Tasks\"\r\n                        data={taskList}\r\n                        columns={columns}\r\n                        options={options}\r\n                    />\r\n                {/* </MuiThemeProvider> */}\r\n            {/* </div> */}\r\n        </React.Fragment>\r\n    );\r\n}","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { useState } from \"react\"\r\nimport Button from '@material-ui/core/Button'\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart'\r\nimport PetsIcon from '@material-ui/icons/Pets'\r\nimport PhoneIcon from '@material-ui/icons/Phone'\r\nimport LocalPharmacyIcon from '@material-ui/icons/LocalPharmacy'\r\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital'\r\nimport LiveHelpIcon from '@material-ui/icons/LiveHelp'\r\nimport NewTaskForm from './NewTaskForm'\r\nimport TasksTable from './TaskTable'\r\nimport initialTasks from \"./tasksDataOnly\"\r\n\r\nconst useStyles =\r\n    makeStyles(\r\n        {\r\n            h1: {\r\n                color: \"#4C4B51\"\r\n            },\r\n            largeButton: {\r\n                border: 5,\r\n                color: \"#FF8E53\",\r\n                padding: \"15px 15px\",\r\n                margin: \"5px 15px 10px 15px\",\r\n                height: 100,\r\n                width: 100,\r\n            },\r\n            largeIcon:\r\n                { fontSize: 60 },\r\n\r\n            label: {\r\n                flexDirection: 'column',\r\n                // color: '#4C4B51'\r\n            },\r\n            icon: {\r\n                fontSize: '32px !important',\r\n                marginBottom: 5\r\n            }\r\n        })\r\n\r\n\r\nfunction AddTask() {\r\n\r\n    const [taskList, setTaskList] = useState(initialTasks())\r\n    let nextId = 11\r\n\r\n    const addTask = newTask => {\r\n        newTask.id = nextId\r\n        nextId++\r\n        newTask.status = \"open\"\r\n        const updatedTaskList = [...taskList, newTask]\r\n        setTaskList(updatedTaskList)\r\n        console.log(\"New task added: \", newTask)\r\n        console.log(\"Tasks list :\", updatedTaskList)\r\n        console.log(\"Tasks list :\", taskList)\r\n    }\r\n\r\n    const [showAddDialog, setShowAddDialog] = React.useState(false);\r\n    const [taskType, setTaskType] = React.useState(null);\r\n\r\n    const handleClickOpen = (e, taskType) => {\r\n        setTaskType(taskType)\r\n        setShowAddDialog(true)\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setTaskType(null)\r\n        setShowAddDialog(false)\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    return <div>\r\n\r\n        <h1 className=\"text\">I need help with...</h1>\r\n\r\n        <Button classes={{ root: classes.largeButton, label: classes.label }}\r\n            onClick={(e) => handleClickOpen(e, \"shop\")}>\r\n            <ShoppingCartIcon className={classes.largeIcon} />\r\n            Shopping\r\n        </Button>\r\n        <Button classes={{ root: classes.largeButton, label: classes.label }}\r\n            onClick={(e) => handleClickOpen(e, \"pharm\")}>\r\n            <LocalPharmacyIcon className={classes.largeIcon} />\r\n            Pharmacy\r\n        </Button>\r\n        <Button classes={{ root: classes.largeButton, label: classes.label }}\r\n            onClick={(e) => handleClickOpen(e, \"dog\")}>\r\n            <PetsIcon className={classes.largeIcon} />\r\n            Dog Walk\r\n        </Button>\r\n        <Button classes={{ root: classes.largeButton, label: classes.label }}\r\n            onClick={(e) => handleClickOpen(e, \"hospital\")}>\r\n            <LocalHospitalIcon className={classes.largeIcon} />\r\n            Hospital\r\n        </Button>\r\n        <Button classes={{ root: classes.largeButton, label: classes.label }}\r\n            onClick={(e) => handleClickOpen(e, \"phone\")}>\r\n            <PhoneIcon className={classes.largeIcon} />\r\n            Phone Call\r\n        </Button>\r\n        <Button classes={{ root: classes.largeButton, label: classes.label }}\r\n            onClick={(e) => handleClickOpen(e, \"any\")}>\r\n            <LiveHelpIcon className={classes.largeIcon} />\r\n            Other\r\n        </Button>\r\n\r\n        <NewTaskForm open={showAddDialog} handleClose={handleClose} taskType={taskType} addTask={addTask} />\r\n        <TasksTable taskList={taskList} />\r\n    </div>\r\n}\r\n\r\nexport default AddTask","\r\n\r\nexport default function intialTasks() {\r\n     \r\n const tList = [\r\n    {\r\n        id: 1,\r\n        taskType: \"Shopping\",\r\n        taskDetails: \"I need help with Shopping from Tesco\",\r\n        start: \"2020-12-28T10:00\",\r\n        end: \"2020-12-28T10:00\",\r\n        status: \"done\",\r\n    },\r\n    {\r\n        id: 2,\r\n        taskType: \"Dog Walking\",\r\n        taskDetails: \"I need help with dog walkingevery morning and afternoon\",\r\n        start: \"2020-12-28T10:00\",\r\n        end: \"2020-12-28T10:00\",\r\n        status: \"done\",\r\n    },\r\n    {\r\n        id: 3,\r\n        taskType: \"Shopping\",\r\n        taskDetails: \"I need help with Shopping from Asda\",\r\n        start: \"2020-12-28T10:00\",\r\n        end: \"2020-12-28T10:00\",\r\n        status: \"done\",\r\n    },\r\n    {\r\n        id: 4,\r\n        taskType: \"Pharmacy\",\r\n        taskDetails: \"I need help with picking up my prescription from local gp\",\r\n        start: \"2020-12-28T10:00\",\r\n        end: \"2020-12-28T10:00\",\r\n        status: \"done\",\r\n    },\r\n    {\r\n        id: 5,\r\n        taskType: \"Hospital\",\r\n        taskDetails: \"I need help to drop off and pick up from my hospital\",\r\n        start: \"2020-12-28T10:00\",\r\n        end: \"2020-12-28T10:00\",\r\n        status: \"done\",\r\n    },\r\n    {\r\n        id: 6,\r\n        taskType: \"Phone Call\",\r\n        taskDetails: \"I need someone to give me a call to have a chat\",\r\n        start: \"2020-12-28T10:00\",\r\n        end: \"2020-12-28T10:00\",\r\n        status: \"done\",\r\n    },\r\n    {\r\n        id: 7,\r\n        taskType: \"Shopping\",\r\n        taskDetails: \"I need help with Shopping from Tesco\",\r\n        start: \"2020-12-28T10:00\",\r\n        end: \"2020-12-28T10:00\",\r\n        status: \"done\",\r\n    },\r\n    {\r\n        id: 8,\r\n        taskType: \"Other\",\r\n        taskDetails: \"I need help with mowing my garden\",\r\n        start: \"2020-12-28T10:00\",\r\n        end: \"2020-12-28T10:00\",\r\n        status: \"done\",\r\n    },\r\n    {\r\n        id: 9,\r\n        taskType: \"Shopping\",\r\n        taskDetails: \"I need help with Shopping from Sainsbuyrys\",\r\n        start: \"2020-12-28T10:00\",\r\n        end: \"2020-12-28T10:00\",\r\n        status: \"done\",\r\n    },\r\n    {\r\n        id: 10,\r\n        taskType: \"Medical\",\r\n        taskDetails: \"I need help with picking up my prescription\",\r\n        start: \"2020-12-28T10:00\",\r\n        end: \"2020-12-28T10:00\",\r\n        status: \"done\",\r\n    },\r\n]\r\nreturn tList\r\n}","import VolunteerSearchTask from \"./VolunteerSearchTask\";\r\n\r\nconst VolunteerWelcome = () => {\r\n  return (\r\n    <div>\r\n      <VolunteerSearchTask />        \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VolunteerWelcome;\r\n","import React from \"react\"\r\nimport { Route, Redirect } from \"react-router-dom\"\r\nimport { useAuth } from \"../contexts/AuthContext\"\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }) {\r\n  const { currentUser } = useAuth()\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={props => {\r\n          console.log(currentUser)\r\n        return currentUser ? <Component {...props} /> : <Redirect to=\"/\" />\r\n        \r\n      }}\r\n    ></Route>\r\n  )\r\n}","import React from \"react\";\r\nimport \"./App.css\";\r\nimport AppNavBar from \"./components/structure/AppNavBar\"\r\nimport Landing from \"./components/landing/Landing\"\r\nimport About from \"./components/landing/About\"\r\nimport Contact from \"./components/landing/Contact\"\r\nimport Footer from \"./components/structure/Footer\"\r\nimport SignIn from \"./components/login/SignIn\"\r\nimport SignUp from \"./components/login/SignUp\"\r\nimport ForgotPassword from \"./components/login/ForgotPassword\"\r\nimport RegistrationPage  from \"./components/registrationPage/RegistrationPage\"\r\nimport VolunteerSearchTask from \"./components/volunteerTask/VolunteerSearchTask\"\r\nimport AddTask from \"./components/task/AddTask\"\r\nimport VolunteerWelcome from \"./components/volunteerTask/VolunteerWelcomePage\"\r\nimport { BrowserRouter as Router,  Route, Switch } from \"react-router-dom\"\r\nimport { AuthProvider } from \"./contexts/AuthContext\"\r\nimport PrivateRoute from \"./components/PrivateRoute\"\r\n\r\nfunction App() {\r\n    \r\n    return (\r\n        \r\n        <Router basename={process.env.PUBLIC_URL}>\r\n            <AuthProvider>\r\n            <div className=\"App\">\r\n                <AppNavBar />\r\n                <div className=\"AppContent\">\r\n                <Switch>\r\n                <Route exact path=\"/HelpWhoNeeds/\">\r\n                    <Landing />\r\n                </Route>\r\n                <Route path=\"/about\">\r\n                    <About />\r\n                </Route>\r\n                <Route path=\"/contact\">\r\n                    <Contact />\r\n                </Route>\r\n                <Route path=\"/login/:userType\">\r\n                    <SignIn />\r\n                </Route>  \r\n                <Route path=\"/signUp/:user\">\r\n                    <SignUp />\r\n                </Route>  \r\n                <Route path=\"/forgotPassword/:user\">\r\n                    <ForgotPassword />\r\n                </Route>   \r\n                <Route path=\"/requestee/tasks\">\r\n                    <AddTask />\r\n                </Route>   \r\n                <PrivateRoute path=\"/registrationPage/:user\" component= {RegistrationPage} />\r\n                <PrivateRoute path=\"/searchTask\" component= {VolunteerSearchTask} />\r\n                <PrivateRoute path=\"/myTask\" component= {VolunteerWelcome} />\r\n                <PrivateRoute path=\"/addTask\" component= {AddTask} />\r\n                </Switch>\r\n                </div>\r\n                <Footer />\r\n            </div>\r\n            </AuthProvider>\r\n        </Router>\r\n       \r\n    );\r\n\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}