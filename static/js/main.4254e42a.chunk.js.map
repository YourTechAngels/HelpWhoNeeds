{"version":3,"sources":["fireBase.js","contexts/AuthContext.js","components/structure/AppNavBar.js","components/landing/Landing.js","components/landing/Legal.js","components/landing/Cookie.js","components/landing/Support.js","components/landing/Privacy.js","components/landing/TermConditions.js","components/landing/About.js","components/landing/Contact.js","components/structure/Footer.js","components/login/SignIn.js","components/login/SignUp.js","components/structure/Notification.js","components/login/Profile.js","components/login/ForgotPassword.js","components/registrationPage/RegistrationPage.js","components/volunteerTask/TaskDetail.js","components/structure/ConfirmDialog.js","components/volunteerTask/TaskListTable.js","components/volunteerTask/VolunteerSearchTask.js","components/task/NewTaskButtons.js","components/task/NewTaskForm.js","components/task/TaskTable.js","components/task/SearchVolunteer.js","components/task/AddTask.js","components/volunteerTask/VolunteerWelcomePage.js","components/PrivateRoute.js","App.js","reportWebVitals.js","index.js"],"names":["app","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","AuthContext","React","createContext","useAuth","useContext","AuthProvider","children","useState","currentUser","setCurrentUser","loading","setLoading","useEffect","onAuthStateChanged","user","value","login","email","password","signInWithEmailAndPassword","signup","createUserWithEmailAndPassword","signout","signOut","resetPassword","sendPasswordResetEmail","updateEmail","updatePassword","Provider","useStyles","makeStyles","theme","root","flexGrow","margin","spacing","title","appBar","backgroundColor","HomeIcon","props","SvgIcon","d","AppNavBar","classes","setAuth","anchorEl","setAnchorEl","console","log","uid","open","Boolean","history","useHistory","handleClose","a","push","alert","className","FormGroup","FormControlLabel","control","Switch","checked","onChange","event","target","aria-label","label","AppBar","position","Toolbar","color","fontSize","onClick","window","location","href","Typography","variant","Button","component","Link","to","IconButton","aria-controls","aria-haspopup","currentTarget","Menu","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","button","pInfo","textAlign","divContentWrapper","minHeight","paddingLeft","Landing","Legal","align","Grid","container","flex-start","noWrap","Cookie","Support","Privacy","TermConditions","About","direction","justify","item","xs","textFld","width","height","border","fontWeight","marginLeft","marginTop","Contact","status","setStatus","handleSubmit","e","preventDefault","elements","name","message","details","fetch","method","headers","body","JSON","stringify","response","json","result","onSubmit","alignItems","TextField","required","type","inputProps","maxLength","style","footer","boxSizing","padding","borderTop","Footer","Copyright","Date","getFullYear","paper","display","flexDirection","avatar","palette","secondary","main","form","submit","SignIn","useParams","userType","emailRef","useRef","passwordRef","error","setError","setEmail","uID","setUID","nameLabel","current","ui","Container","maxWidth","CssBaseline","Avatar","Alert","severity","AlertTitle","fullWidth","inputRef","autoFocus","Checkbox","disabled","Box","mt","Signup","passwordConfirmRef","top","Notification","notify","setNotify","verticalPosTop","reason","isOpen","Snackbar","autoHideDuration","marginRight","Profile","initialInputState","firstName","lastName","dateOfBirth","phoneNumber","postcode","address1","address2","city","county","formData","setFormData","successMessage","setSuccessMessage","postcodeRef","address1Ref","address2Ref","cityRef","countyRef","DBSChecked","setDBSChecked","addressLine1","setAddressLine1","addressLine2","setAddressLine2","countyName","setCountyName","cityName","setCityName","addressList","setAddressList","postCodeSearched","setpostCodeSearched","errors","setErrors","setId","isVolunteer","setIsVolunteer","errorpostcode","setErrorpostcode","long","setLong","lat","setLat","notifyMsg","setNotifyMsg","axios","get","params","then","responseData","data","userDataSet","first_name","last_name","date_of_birth","phone_number","post_code","address_line_1","address_line_2","is_volunteer","dbs","catch","request","config","handleChange","handleChecked","addLine1","addLine2","addCity","addCounty","dob","mail","promises","Promise","all","finally","patch","latitude","longitude","date","Fragment","sm","autoComplete","InputLabelProps","shrink","max","getMonth","toString","padStart","getDate","ButtonGroup","addresses","FormControl","InputLabel","htmlFor","Select","native","labelId","valueList","selectedOptions","map","opt","addressStore","split","selected","addressArray","ForgotPassword","setMessage","RegistrationPage","DBSchecked","evt","undefined","post","TaskDialog","useTheme","fullScreen","useMediaQuery","breakpoints","down","Dialog","aria-labelledby","DialogTitle","DialogContent","noValidate","taskType","taskDetails","multiline","rows","DialogActions","dailog","dailogContent","dailogAction","justifyContent","ConfirmDialog","confirmDialog","setConfirmDialog","subTitle","size","minWidth","onConfirm","SPACED_DATE_FORMAT","options","filterType","selectableRows","rowsPerPage","rowsPerPageOptions","print","download","sortOrder","TaskListTable","taskListData","isMyTask","handleAccept","handleView","handleReject","handleComplete","taskCols","sort","filter","viewColumns","customBodyRender","tableMeta","updateValue","rowData","moment","format","createMuiTheme","overrides","MuiDataTable","responsiveScroll","maxHeight","MUIDataTableToolbar","background","MUIDataTableBodyCell","overflow","whiteSpace","textOverflow","columns","h5","VolunteerSearchTask","userUID","userId","setUserId","pendingTasks","setPendingTasks","dataFetched","setDataFetched","taskStateUpdated","setTaskStateUpdated","volId","allTask","task","requestee_details","task_type_details","task_type_name","description","start","start_time","end","end_time","distance","volunteer","postCode","myTasks","unassignedTasks","hideMyTask","setHideMyTask","hideNewTask","setHideNewTask","showDialog","setShowDialog","dialogData","setDialogData","taskId","selectedTask","find","handleClickOpen","isUpdatedByVol","returnTask","assignTask","CircularProgress","Hidden","smUp","h1","largeButton","largeIcon","icon","marginBottom","NewTaskButtons","p","FormDialog","defaultValues","updTaskId","updateTaskList","reqId","reset","taskTypeId","taskTypeCode","task_type","minDuration","min_duration","getFormDate","useForm","mode","register","watch","setValue","clearErrors","resetAndClose","watchAll","reqFieldMsg","dbsReq","createItem","startDate","startTime","endDate","endTime","newTaskId","newTask","put","updatedTask","includes","helperText","min","hasOwnProperty","validate","setMinutes","getMinutes","TaskTable","taskList","handleCopy","handleEdit","handleCancel","handleSearchVol","slice","length","MuiPaper","MuiTableCell","MUIDataTableHeadCell","setRowProps","row","localVolData","reqVolId","SearchVolunteer","requestVolunteer","setSelectedVol","cols","AddTask","setReqId","setTaskList","taskTypeList","setTaskTypeList","parseDbTask","dbTask","taskTypeName","expired","dbs_required","statusName","status_name","volunteerId","volunteer_details","requestedVol","requested_vol","requested_vol_details","url","timeout","requid","taskData","requestee","uId","updatedTaskList","addTask","updTask","updateTask","taskDefaults","showAddDialog","setShowAddDialog","showSearchDialog","setShowSearchDialog","setTaskType","newTaskDefaults","setNewTaskDefaults","setUpdTaskId","findTaskType","NewTaskForm","taskToCopy","taskToEdit","taskToRequest","handleSearchOpen","VolunteerWelcome","PrivateRoute","Component","rest","render","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4254e42a.chunk.js","sourcesContent":["import firebase from \"firebase/app\"\r\nimport \"firebase/auth\"\r\n\r\nconst app = firebase.initializeApp({\r\n    \r\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY ,\r\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN ,\r\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID ,\r\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET ,\r\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID ,\r\n    appId: process.env.REACT_APP_FIREBASE_APP_ID\r\n})\r\n\r\nexport const auth = app.auth()\r\nexport default app","import React, { useContext, useState, useEffect } from \"react\"\r\nimport { auth } from \"../fireBase\"\r\n\r\nconst AuthContext = React.createContext()\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext)\r\n}\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [currentUser, setCurrentUser] = useState()\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  function signup(email, password) {\r\n    return auth.createUserWithEmailAndPassword(email, password)\r\n  }\r\n\r\n  function login(email, password) {\r\n    return auth.signInWithEmailAndPassword(email, password)\r\n  }\r\n\r\n  function signout() {\r\n    return auth.signOut()\r\n  }\r\n\r\n  function resetPassword(email) {\r\n    return auth.sendPasswordResetEmail(email)\r\n  }\r\n\r\n  function updateEmail(email) {\r\n    return currentUser.updateEmail(email)\r\n  }\r\n\r\n  function updatePassword(password) {\r\n    return currentUser.updatePassword(password)\r\n  }\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged(user => {\r\n      setCurrentUser(user)\r\n      setLoading(false)\r\n    })\r\n\r\n    return unsubscribe\r\n  }, [])\r\n\r\n  const value = {\r\n    currentUser,\r\n    login,\r\n    signup,\r\n    signout,\r\n    resetPassword,\r\n    updateEmail,\r\n    updatePassword\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n    AppBar,\r\n    Toolbar,\r\n    Typography,\r\n    Button,\r\n    IconButton,\r\n    Switch,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    MenuItem,\r\n    Menu,\r\n    SvgIcon,\r\n} from \"@material-ui/core\";\r\nimport AccountCircle from \"@material-ui/icons/AccountCircle\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n        \"& > svg\": {\r\n            margin: theme.spacing(2),\r\n        },\r\n    },\r\n    title: {\r\n        flexGrow: 1,\r\n    },\r\n    appBar: {\r\n        backgroundColor: \"#9370db\",\r\n    },\r\n}));\r\n\r\nfunction HomeIcon(props) {\r\n    return (\r\n        <SvgIcon {...props}>\r\n            <path d=\"M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z\" />\r\n        </SvgIcon>\r\n    );\r\n} /*For HomeIcons */\r\n\r\nconst AppNavBar = () => {\r\n    const classes = useStyles();\r\n    const { currentUser, signout } = useAuth();\r\n    const [auth, setAuth] = React.useState(false); \r\n    const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n    useEffect(() => {\r\n        setAuth(currentUser === null ? false : true);\r\n    }, [currentUser]);\r\n\r\n    if(currentUser) {\r\n     console.log(currentUser.email);\r\n     console.log(currentUser.uid); }\r\n     console.log(\"auth\" + auth);\r\n    const open = Boolean(anchorEl);\r\n    const history = useHistory();\r\n\r\n    const handleChange = (event) => {\r\n        setAuth(event.target.checked);\r\n    };\r\n\r\n    const handleMenu = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n    async function handleSignOut() {\r\n        try {\r\n            await signout();\r\n            setAuth(false);\r\n            history.push(\"/HelpWhoNeeds\");\r\n        } catch (error) {\r\n            setAuth(currentUser === null ? false : true);\r\n            console.log(error);\r\n            alert(\"failed to log out\");\r\n        }\r\n\r\n        console.log(\"auth\" + auth);\r\n        handleClose();\r\n    }\r\n     \r\n    const handleClick=() => {\r\n        history.push(\"/profile\")\r\n        handleClose();\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <FormGroup>\r\n                <FormControlLabel\r\n                    control={\r\n                        <Switch\r\n                            checked={auth}\r\n                            onChange={handleChange}\r\n                            aria-label=\"login switch\"\r\n                        />\r\n                    }\r\n                    label={auth ? \"Logout\" : \"Login\"}\r\n                />\r\n            </FormGroup>\r\n            <AppBar position=\"static\" className={classes.appBar}>\r\n                <Toolbar>\r\n                   <HomeIcon\r\n                        color=\"action\"\r\n                        fontSize=\"large\"\r\n                        onClick={(event) => (window.location.href = \"/helpwhoneeds/\")}\r\n                    />\r\n                    <Typography variant=\"h6\" className={classes.title}>\r\n                        Help Who Needs\r\n          </Typography>\r\n\r\n                    <Button color=\"inherit\" component={Link} to={\"/about\"}>\r\n                        About\r\n          </Button>\r\n                    <Button color=\"inherit\" component={Link} to={\"/contact\"}>\r\n                        Contact\r\n          </Button>\r\n                    {auth && (\r\n                        <div>\r\n                            <IconButton\r\n                                aria-label=\"account of current user\"\r\n                                aria-controls=\"menu-appbar\"\r\n                                aria-haspopup=\"true\"\r\n                                onClick={handleMenu}\r\n                                color=\"inherit\"\r\n                            >\r\n                                <AccountCircle />\r\n                            </IconButton>\r\n                            <Menu\r\n                                id=\"menu-appbar\"\r\n                                anchorEl={anchorEl}\r\n                                anchorOrigin={{\r\n                                    vertical: \"top\",\r\n                                    horizontal: \"right\",\r\n                                }}\r\n                                keepMounted\r\n                                transformOrigin={{\r\n                                    vertical: \"top\",\r\n                                    horizontal: \"right\",\r\n                                }}\r\n                                open={open}\r\n                                onClose={handleClose}\r\n                            >\r\n                                <MenuItem onClick={handleClick}>Profile</MenuItem>\r\n                                <MenuItem onClick={handleSignOut}>Sign Out</MenuItem>\r\n                            </Menu>\r\n                        </div>\r\n                    )}\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AppNavBar;\r\n","import { Link, useHistory } from \"react-router-dom\"\r\nimport { makeStyles, Button } from \"@material-ui/core\"\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\n\r\nconst useStyles = makeStyles({\r\n    button:{\r\n        margin:\"10px\",\r\n    },\r\n    pInfo:{\r\n        textAlign: \"center\",\r\n    },\r\n    divContentWrapper:{\r\n        textAlign: \"center\",\r\n        minHeight: \"100%\",\r\n        paddingLeft: \"50px\",\r\n    }\r\n\r\n});\r\n\r\nconst Landing = () => {\r\n    \r\n    const classes = useStyles();\r\n    const { currentUser } = useAuth();\r\n    const history = useHistory();\r\n    const handleClick =() => { \r\n        (currentUser ? history.push(\"/myTask\") : history.push(\"/login/volunteer\") )           \r\n    } \r\n    const handleUserClick =() => {\r\n         (currentUser ? history.push(\"/addTask\") : history.push(\"/login/requestee\") )\r\n    }     \r\n      \r\n   \r\n    return (\r\n            <div className={classes.divContentWrapper} >\r\n                <h1>Help Who Needs</h1>\r\n                <p>\r\n                    Our TechForGood project aims to match a volunteer with a vulnerable\r\n                    person who is shielding in these unprecedented times. Hence our\r\n                    application is called HelpWhoNeeds. The app will aim to match a\r\n                    volunteer with a vulnerable person in their immediate local area\r\n                    helping with chores such as shopping, GP visits, prescriptions, dog\r\n                    walking or just some social contact with the appropriate measures in\r\n                    place. We hope this app brings some comfort and relief to the users\r\n                    with a sense of moral and social obligation. \r\n        </p>\r\n\r\n        <p className={classes.pInfo}> If you would like help or need any assistance using our system, please call <strong>0800 123 4567</strong>.</p>\r\n                <Button\r\n                    className= {classes.button}\r\n                    variant=\"outlined\"\r\n                    color=\"default\"\r\n                    onClick = {handleUserClick}             \r\n                >\r\n                    I need Help\r\n                </Button>\r\n                \r\n                <Button\r\n                    className= {classes.button} \r\n                    variant=\"outlined\"\r\n                    color=\"default\"\r\n                    onClick = {handleClick} \r\n                >\r\n                    I can Help\r\n        </Button>\r\n        </div>\r\n        \r\n    );\r\n};\r\n\r\nexport default Landing;\r\n","import Grid from '@material-ui/core/Grid';\r\nimport { Typography } from '@material-ui/core';\r\nconst Legal = () => (\r\n  <div>\r\n\r\n    <h2 align=\"center\"> Legal</h2>\r\n\r\n    <Grid container flex-start=\"left\" >\r\n\r\n\r\n      <Typography color=\"inherit\" noWrap>\r\n        <p>Your data and GDPR </p>\r\n        <p>End-user privacy</p>\r\n        <p>Intellectual property (IP) rights.</p>\r\n        <p>Advertising and promotions</p>\r\n        <p>Users of this app must be 18 or over</p>\r\n      </Typography>\r\n\r\n    </Grid>\r\n\r\n  </div>\r\n);\r\n\r\nexport default Legal;\r\n","\r\nconst Cookie = () => (\r\n    <div>\r\n        <h2>Cookies</h2>\r\n        <p>\r\n           Cookie Policy\r\n           We use cookies, including from our partners, to enhance and personalise your experience. \r\n           Accept all cookies below, \r\n           or select “Manage Cookies” to view our Cookie Policy and choose which cookies we can use.</p>\r\n           \r\n          <p> Cookies are used for a variety of things that help improve your online experience. \r\n           Some cookies help make sure your information is secure when using our services while keeping our \r\n           forms and site easy to use.\r\n    </p>\r\n    </div>\r\n);\r\n\r\nexport default Cookie;","\r\nconst Support = () => (\r\n    <div>\r\n        <h2>Support</h2>\r\n        <p>\r\n            Please call us anytime for help and support. 0800 123 4567\r\n    </p>\r\n    </div>\r\n);\r\n\r\nexport default Support;","\r\nconst Privacy = () => (\r\n    <div>\r\n        <h2>Privacy Policy</h2>\r\n        <p>\r\n            YourTechAngels is committed to protecting and respecting your privacy. This notice describes what personal data we collect, how we will use that data and how we keep your data safe. For additional information on how we use cookies, please refer to our Cookie Policy. For all other information regarding our services, please refer to our Terms & Conditions.\r\n            Transparency and informing the public about how their data are being used are two basic goals\r\n            of the GDPR.\r\n</p>\r\n        <p>  In this Privacy Notice we will cover: </p>\r\n\r\n        <p>  Who is the data controller?   </p>\r\n        <p> What personal data do we process, for which purpose and what is our legal basis for processing it?  </p>\r\n        <p> Who will process your data?</p>\r\n        <p> Data transfer outside the European Union</p>\r\n        <p>  How long do we keep your data?   </p>\r\n        <p>  Your rights      </p>\r\n        <p> Security </p>\r\n        <p> We collect data from you when you visit our websites or while using our associated apps\r\n        (“websites and Apps”). The data we collect includes your name, email address, telephone number\r\n        and shipping/billing address, your day and month of birth, your favorite designers and information\r\n        regarding your browsing and shopping behaviour. Data is collected when you place an order,\r\n        call our Customer Care team, register with us, opt into our marketing communications, browse our site\r\n        and use other services offered by our site. The data we collect is used to take your order,\r\n        process payment and deliver your purchase to you. We also use it to deliver marketing communications,\r\n        give access to services for registered users, personalize your visit to our site and provide\r\n        assistance via our Customer Care team.\r\n</p>\r\n        <p>We must have a valid reason for processing your personal data and we may not collect, store or use data about you that is not compatible with that reason. There are four valid reasons for our use of your personal data: Performance of a Contract, our Legitimate Interests as a business, a Legal Obligation we are required to follow and Consent which you provide to us.\r\n</p>\r\n        <p>If you have given your consent to our use of your personal data, you are entitled to withdraw this consent at any time.\r\n\r\n\r\n    </p>\r\n    </div>\r\n);\r\n\r\nexport default Privacy;\r\n","\r\nconst TermConditions = () => (\r\n    <div>\r\n        <h2>Terms & Conditions</h2>\r\n        <p>\r\n            \r\n            These are our Terms & Conditions. </p>\r\n            <p>What’s covered in these terms </p>\r\n           <p> We know it’s tempting to skip these Terms of Service, \r\n               but it’s important to establish what you can expect from us as you use our services, \r\n               and what we expect from you.</p>\r\n\r\n<p>These Terms of Service reflect the way that our business works, the laws that apply to our company, \r\nand certain things that we’ve always believed to be true. As a result, these Terms of Service \r\nhelp define our relationship with you as you interact with our services. For example, \r\nthese terms include the following topic headings:</p>\r\n\r\n    <p>What you can expect from us, which describes how we provide and develop our services\r\n    What we expect from you, which establishes certain rules for using our services\r\n    Content in services, which describes the intellectual property rights to the content that you find \r\n    in our services – whether that content belongs to you, us or others\r\n    In case of problems or disagreements, which describes other legal rights that you have, and what to \r\n    expect in case someone violates these terms.</p>\r\n\r\n<p> Understanding these terms is important because, to use our services, you must accept these terms.\r\n\r\nBesides these terms, we also publish a Privacy Policy. Although it’s not part of these terms, we encourage \r\nyou to read it to better understand how you can update, manage, export and delete your information.</p>\r\n\r\n<p>Service provider</p>\r\n\r\nYourTechAngels services are provided by, and you’re contracting with:\r\n\r\nYourTechAngels\r\norganised under the laws of the United Kingsdom and operating under the laws of the UK\r\n\r\nXX Street,\r\nLondon, UK\r\n\r\n<p>Age requirements</p>\r\n\r\n<p>If you’re under the age required to manage your own, you must have your parent or legal guardian’s \r\npermission to use this account. Please ask your parent or legal guardian to read these terms with you.\r\n\r\nIf you’re a parent or legal guardian, and you allow your child to use the services, then these terms apply to you and you’re responsible for your child’s activity on the services.\r\n\r\nSome services have additional age requirements as described in their service-specific additional terms and policies.\r\n    </p>\r\n    </div>\r\n);\r\n\r\nexport default TermConditions;\r\n","import { Link } from \"react-router-dom\"\r\nimport { makeStyles } from \"@material-ui/core\"\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        margin: \"10px\",\r\n    },\r\n    pInfo: {\r\n        textAlign: \"center\",\r\n    },\r\n    divContentWrapper: {\r\n        textAlign: \"center\",\r\n        minHeight: \"100%\",\r\n        paddingLeft: \"50px\",\r\n    }\r\n\r\n});\r\n\r\nconst About = () => {\r\n\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.divContentWrapper} >\r\n            <h1>YourTechAngels - Project HelpWhoNeeds</h1>\r\n\r\n            <p>\r\n                Established in 2020, Your Tech Angels is a collaborative team of 4 engineers who are involved\r\n                and interested in technology.  Our aim is to use technology to help others especially during\r\n                the Covid 19 pandemic.\r\n                This is the motivation behind our HelpWhoNeeds project that assists the shielding population in\r\n                the UK with everyday assistance such as delivering groceries or prescriptions, dog walking or\r\n                even just a chat. The app we are building will help those who need to find a volunteer match in\r\n                their local areas - near their vicinity based on their post code during lockdown and other\r\n                times too.\r\n        </p>\r\n\r\n            <p className={classes.pInfo}> You can request Volunteer help 24x7 - <strong>0800 123 4567</strong></p>\r\n\r\n\r\n\r\n            <Grid container\r\n\r\n                direction=\"row\"\r\n                // alignItems=\"centre\" \r\n                spacing={4}\r\n                justify=\"center\" >\r\n\r\n                <Grid item xs={2} >\r\n                    <Link to={'/legal'} variant=\"body2\">\r\n                        Legal\r\n               </Link> </Grid>\r\n\r\n                <Grid item xs={2}>\r\n                    <Link to={`/cookie`} variant=\"body2\">\r\n                        Cookies\r\n               </Link> </Grid>\r\n\r\n                <Grid item xs={2} >\r\n                    <Link to={`/support`} variant=\"body2\">\r\n                        Support\r\n               </Link> </Grid>\r\n\r\n                <Grid item xs={2}>\r\n                    <Link to={`/termconditions`} variant=\"body2\">\r\n                        TermsConditions\r\n               </Link> </Grid>\r\n\r\n                <Grid item xs={2}>\r\n                    <Link to={`/privacy`} variant=\"body2\">\r\n                        Privacy\r\n               </Link> </Grid>\r\n\r\n            </Grid>\r\n\r\n        </div>\r\n\r\n    )\r\n};\r\n\r\n\r\nexport default About;\r\n","import React, { useState } from \"react\"\r\nimport { makeStyles, Button } from \"@material-ui/core\"\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = {\r\n  textFld: { width: '85%', height: 40, paddingLeft: 8 },\r\n  button: {\r\n    border: '4px',\r\n    fontWeight: 'bold',\r\n    marginLeft: 10,\r\n    marginTop: '10px',\r\n  },\r\n  divContentWrapper: {\r\n    textAlign: \"center\",\r\n    minHeight: \"100%\",\r\n    paddingLeft: \"50px\",\r\n  }\r\n};\r\n\r\n\r\nconst Contact = () => {\r\n  const [status, setStatus] = useState(\"Submit\");\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    setStatus(\"Sending...\");\r\n    const { name, email, message } = e.target.elements;\r\n    let details = {\r\n      name: name.value,\r\n      email: email.value,\r\n      message: message.value,\r\n    };\r\n    let response = await fetch(\"http://localhost:5000/contact\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json;charset=utf-8\",\r\n      },\r\n      body: JSON.stringify(details),\r\n    });\r\n    setStatus(\"Submit\");\r\n    let result = await response.json();\r\n    alert(result.status);\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" spacing={10} >\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              required\r\n              id=\"name\"\r\n              type=\"text\"\r\n              name=\"Name\"\r\n              label=\"Name\"\r\n              variant=\"outlined\"\r\n              inputProps={{ maxLength: 20 }}\r\n              style={useStyles.textFld}\r\n              required\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              required\r\n              id=\"email\"\r\n              type=\"text\"\r\n              name=\"Email\"\r\n              label=\"Email\"\r\n              variant=\"outlined\"\r\n              inputProps={{ maxLength: 20 }}\r\n              style={useStyles.textFld}\r\n              required\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              required\r\n              id=\"message\"\r\n              type=\"text\"\r\n              name=\"Message\"\r\n              label=\"Message\"\r\n              variant=\"outlined\"\r\n              inputProps={{ maxLength: 100 }}\r\n              style={useStyles.textFld}\r\n              required\r\n              multiline\r\n              rows={6}\r\n            />\r\n\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container\r\n          justify=\"left\" alignItems=\"left\" spacing={3} >\r\n          <Grid item xs={12}>\r\n            <button color=\"secondary\" variant=\"contained\" type=\"submit\">{status} </button>\r\n          </Grid>\r\n        </Grid>\r\n\r\n\r\n      </div>\r\n\r\n    </form>\r\n\r\n\r\n  );\r\n};\r\n\r\nexport default Contact;","import { makeStyles } from \"@material-ui/core/styles\"\r\n\r\nconst useStyles = makeStyles({\r\n    footer:{\r\n        boxSizing: \"border-box\",\r\n        height: \"50px\",\r\n        padding: \"15px\",\r\n        backgroundColor: \"#eee\",\r\n        borderTop: \"1px solid #e0e0e0\",       \r\n        position: \"absolute\",\r\n        width: \"100%\",\r\n        textAlign: \"center\",\r\n    },\r\n\r\n});\r\n\r\nfunction Footer(){\r\n\r\n    const classes = useStyles();\r\n    return(\r\n        <footer className= {classes.footer}>\r\n        <div>\r\n            Made by <a href=\"https://github.com/YourTechAngels\">YourTechAngels</a>\r\n        </div>\r\n        </footer>\r\n    )  \r\n}\r\n\r\n\r\nexport default Footer;","import React, { useState, useRef } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport AlertTitle from '@material-ui/lab/AlertTitle';\r\nimport Box from \"@material-ui/core/Box\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {\"Copyright © \"}\r\n            <Link color=\"inherit\" to=\"https://material-ui.com/\">\r\n                Your Website\r\n    </Link>{\" \"}\r\n            {new Date().getFullYear()}\r\n            {\".\"}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: \"100%\", \r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\nexport default function SignIn() {\r\n    const classes = useStyles();\r\n    const param = useParams();\r\n    const user = param.userType;\r\n    const emailRef = useRef()\r\n    const passwordRef = useRef()\r\n    const { login, currentUser } = useAuth()\r\n    const [error, setError] = useState(\"\")\r\n    const [email,setEmail] = useState(\"\")\r\n    const [uID, setUID] = useState(\"\")\r\n    const [loading, setLoading] = useState(false)\r\n    const history = useHistory()\r\n    const nameLabel = (`${user}`==='AssistanceRequester'? 'Requestee': `${user}`)\r\n    \r\n  \r\n    async function handleSubmit(e) {\r\n      e.preventDefault()\r\n  \r\n      try {\r\n        setError(\"\")\r\n        setLoading(true)\r\n        await login(emailRef.current.value, passwordRef.current.value)\r\n\r\n        if (`${user}` === 'volunteer')\r\n        { history.push(\"/mytask\");\r\n          console.log(process.env.PUBLIC_URL) }\r\n        else {\r\n            history.push(\"/addtask\") }\r\n        }\r\n     catch {\r\n        setError(\"Failed to log in\")\r\n      }\r\n  \r\n      setLoading(false)\r\n      if(currentUser) {\r\n        setEmail(currentUser.email);\r\n        setUID(currentUser.ui)\r\n        console.log(email);\r\n        console.log(uID); }\r\n\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                    <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                   {nameLabel} Sign in\r\n                </Typography>\r\n            { error && <Alert severity=\"error\">\r\n            <AlertTitle>Error: {error}</AlertTitle>\r\n            </Alert>}\r\n                <form onSubmit={handleSubmit}>\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        type=\"email\" \r\n                        inputRef={emailRef} \r\n                        id=\"email\"\r\n                        label=\"Email Address\"\r\n                        autoFocus\r\n                    />\r\n                    <TextField\r\n                        variant=\"outlined\"\r\n                        margin=\"normal\"\r\n                        required\r\n                        fullWidth\r\n                        type=\"password\" \r\n                        inputRef={passwordRef}\r\n                        label=\"Password\"\r\n                        id=\"password\"\r\n                    />\r\n                    <FormControlLabel\r\n                        control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                        label=\"Remember me\"\r\n                    />\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        disabled = {loading}\r\n                    >\r\n                        Sign In\r\n                    </Button>\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <Link to={`/forgotPassword/${user}`} variant=\"body2\">\r\n                                Forgot password?\r\n                            </Link>\r\n                        </Grid>\r\n                    <Grid container>\r\n                        <Grid item xs>\r\n                            <div  className=\"w-100 text-center mt-2\">\r\n                            New User ?<Link to={`/signup/${user}`} variant=\"body2\">\r\n                                Sign Up </Link> \r\n                            </div>\r\n                        </Grid>\r\n                     </Grid></Grid>\r\n                </form>\r\n            </div>\r\n            <Box mt={8}>\r\n                <Copyright />\r\n            </Box>\r\n        </Container>\r\n    );\r\n}\r\n","import React, {useRef, useState } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport AlertTitle from '@material-ui/lab/AlertTitle';\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport { useAuth } from \"../../contexts/AuthContext\"\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {\"Copyright © \"}\r\n            <Link color=\"inherit\" to=\"https://material-ui.com/\">\r\n                Your Website\r\n    </Link>{\" \"}\r\n            {new Date().getFullYear()}\r\n            {\".\"}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: \"100%\", \r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\n\r\nexport default function Signup() {\r\n  const emailRef = useRef()\r\n  const passwordRef = useRef()\r\n  const passwordConfirmRef = useRef()\r\n  const { signup } = useAuth()\r\n  const [error, setError] = useState(\"\")\r\n  const [loading, setLoading] = useState(false)\r\n  const history = useHistory()\r\n  const classes = useStyles();\r\n  const param = useParams();\r\n  const user = param.user;\r\n  \r\n\r\n    async function handleSubmit(e) {\r\n    e.preventDefault()\r\n    console.log(emailRef.current.value,passwordRef.current.value, passwordConfirmRef.current.value)\r\n\r\n    if (passwordRef.current.value !== passwordConfirmRef.current.value) {\r\n      return setError(\"Passwords does not match\")\r\n    }\r\n\r\n    try {\r\n      setError(\"\")\r\n      setLoading(true)\r\n      await signup(emailRef.current.value, passwordRef.current.value)\r\n      history.push(`/registrationpage/${user}`)\r\n    } catch {\r\n      setError(\"Failed to create an account\")\r\n    }\r\n\r\n    setLoading(false)  \r\n   \r\n}\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n            <Avatar className={classes.avatar}>\r\n                <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n                Sign Up\r\n           </Typography>\r\n           { error && <Alert severity=\"error\">\r\n            <AlertTitle>Error: {error}</AlertTitle>\r\n            </Alert>}\r\n           <form onSubmit={handleSubmit} > \r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    type=\"email\" \r\n                    inputRef={emailRef} \r\n                    id=\"email\"\r\n                    label=\"Email Address\"\r\n                    autoFocus\r\n                />\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    type=\"password\" \r\n                    inputRef={passwordRef}\r\n                    label=\"Password\"\r\n                    id=\"password\"\r\n                />\r\n                 <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    type=\"password\" \r\n                    inputRef={passwordConfirmRef}\r\n                    label=\"Confirm Password\"\r\n                    id=\"passwordConfirm\"\r\n                />\r\n                        <Button\r\n                                type=\"submit\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                disabled = {loading}\r\n                                color=\"primary\"\r\n                            >Sign Up\r\n                    </Button>\r\n              </form>\r\n              </div>  <Box mt={8}>\r\n                <Copyright />\r\n            </Box>\r\n        </Container>\r\n  )\r\n}","import { Snackbar, makeStyles } from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        top: theme.spacing(15),\r\n    },\r\n}));\r\n\r\nfunction Notification(props) {\r\n    const classes = useStyles();\r\n    const { notify, setNotify, verticalPosTop } = props;\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === \"clickaway\") {\r\n            return;\r\n        }\r\n        setNotify({\r\n            ...notify,\r\n            isOpen: false,\r\n        });\r\n    };\r\n    return (\r\n        <Snackbar\r\n            className={classes.root}\r\n            open={notify.isOpen}\r\n            autoHideDuration={2000}\r\n            anchorOrigin={{\r\n                vertical: verticalPosTop ? \"top\" : \"bottom\",\r\n                horizontal: \"center\",\r\n            }}\r\n            onClose={handleClose}\r\n        >\r\n            <Alert severity={notify.type} onClose={handleClose}>\r\n                {notify.message}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n\r\n\r\nexport default Notification;\r\n\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { useParams, Link, useHistory } from \"react-router-dom\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport AlertTitle from '@material-ui/lab/AlertTitle';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport axios from \"axios\"\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport { ButtonGroup } from '@material-ui/core';\r\nimport { useAuth } from \"../../contexts/AuthContext\"\r\nimport Notification from \"../structure/Notification\"\r\n\r\nconst useStyles = {\r\n    textFld: { width: '85%', height: 40, paddingLeft: 8 },\r\n    button: {\r\n        border: '4px',\r\n        fontWeight: 'bold',\r\n        alignItems: 'center',\r\n        marginRight: '20px',\r\n        marginTop: '10px'    \r\n    },\r\n\r\n};\r\n\r\n\r\nexport default function Profile(props) {          \r\n\r\n    const initialInputState = {\r\n        firstName: \"\", lastName: \"\", dateOfBirth: \"\", phoneNumber: \"\", postcode: \"\", address1: \"\", address2: \"\",city: \"\", county: \"\", email:\"\"\r\n      }\r\n    const [formData, setFormData,] = useState({initialInputState})\r\n    const { firstName, lastName, dateOfBirth, phoneNumber, postcode, address1, address2, city, county, email } = formData\r\n    const [successMessage, setSuccessMessage] = useState(\"\")\r\n    const emailRef = useRef()\r\n    const postcodeRef = useRef()\r\n    const passwordConfirmRef = useRef()\r\n    const passwordRef = useRef()\r\n    const address1Ref = useRef()\r\n    const address2Ref = useRef()\r\n    const cityRef = useRef()\r\n    const countyRef = useRef()    \r\n    const { currentUser, updatePassword, updateEmail } = useAuth()\r\n    const uID = currentUser.uid\r\n    const emailID = currentUser.email\r\n    const [DBSChecked, setDBSChecked] = useState(false);\r\n    const [checked, setChecked] = React.useState(true);\r\n    const [addressLine1, setAddressLine1] = useState(\"\")\r\n    const [addressLine2, setAddressLine2] = useState(\"\")\r\n    const [countyName, setCountyName] = useState(\"\");\r\n    const [cityName, setCityName] = useState(\"\");\r\n    const [addressList, setAddressList] = useState(\"\");\r\n    const [postCodeSearched, setpostCodeSearched] = useState(false);\r\n    const [errors, setErrors] = useState(\"\")\r\n    const[id, setId] = useState(\"\")\r\n    const[isVolunteer, setIsVolunteer] = useState(false)\r\n    const [errorpostcode, setErrorpostcode] = useState(\"\")\r\n    const [loading, setLoading] = useState(false)\r\n    const history = useHistory()\r\n    const [open, setOpen] = React.useState(false);\r\n    const [long, setLong] = useState()\r\n    const [lat, setLat] = useState()\r\n    const [notifyMsg, setNotifyMsg] = useState({\r\n        isOpen: false,\r\n        message: \" \",\r\n        type: \" \",\r\n    });\r\n    // const param = useParams();\r\n    // const user = param.user;\r\n\r\n    const getFormDate = date => {\r\n        let year = date.getFullYear();\r\n        let month = (1 + date.getMonth()).toString().padStart(2, '0');\r\n        let day = date.getDate().toString().padStart(2, '0');\r\n        return year + '-' + month + '-' + day\r\n    }\r\n     \r\n    \r\n    useEffect(() => {\r\n          axios.get('https://letmeknow.uk/api/accounts/get_user_by_id/',\r\n            {\r\n                params : { uid : uID }\r\n            })\r\n            .then(\r\n                (response) => {\r\n                    const responseData = (response.data[0]);\r\n                    console.log(responseData);\r\n                    const userDataSet = {\r\n                        firstName : `${responseData.first_name}`,\r\n                        lastName : `${responseData.last_name}`,\r\n                        dateOfBirth: `${responseData.date_of_birth === '1900-01-01'?'' : responseData.date_of_birth}`,\r\n                        phoneNumber : `${responseData.phone_number}`,\r\n                        postcode: `${responseData.post_code}`,\r\n                        address1 : `${responseData.address_line_1}`,\r\n                        address2 : `${responseData.address_line_2}`,\r\n                        city : `${responseData.city}`,\r\n                        county : `${responseData.county}`,\r\n                        email : `${responseData.email}`\r\n                    }\r\n                    \r\n\r\n                    setFormData({ lastName : (userDataSet.lastName), firstName: (userDataSet.firstName), dateOfBirth: (userDataSet.dateOfBirth),\r\n                    postcode: (userDataSet.postcode), phoneNumber : (userDataSet.phoneNumber) , address1: (userDataSet.address1), address2: (userDataSet.address2),\r\n                    city: (userDataSet.city), county: (userDataSet.county), email: (userDataSet.email)})\r\n                    setId(responseData.id)\r\n                    console.log(responseData.is_volunteer)\r\n                    setIsVolunteer(responseData.is_volunteer)                   \r\n                    setDBSChecked(responseData.dbs)\r\n                    console.log(responseData.dbs)\r\n                    console.log(formData)\r\n                    console.log(isVolunteer+' '+DBSChecked);\r\n                })\r\n                .catch(function (error) {\r\n                    console.log(\"error\")\r\n                    console.log(error.request);\r\n                    console.log(error.config);\r\n                    console.log(error.message);\r\n    \r\n                });            \r\n        }, [uID]);\r\n        \r\n       \r\n    const handleChange = (e) => {\r\n        setFormData({ ...formData, [e.target.name]: e.target.value });\r\n    }\r\n    const handleChecked = (e) => {\r\n        console.log('inside check handle'+DBSChecked)\r\n        setDBSChecked(e.target.checked)\r\n        console.log('after setting falsefor dbs '+DBSChecked)\r\n    }\r\n\r\n    async function handleSubmit(e) {\r\n        e.preventDefault();\r\n        \r\n        const addLine1 = (addressLine1 === '' ? (address1Ref.current.value) : addressLine1)\r\n        const addLine2 = (addressLine2 === '' ? (address2Ref.current.value) : addressLine2)\r\n        const addCity = (cityName === '' ? (cityRef.current.value) : cityName)\r\n        const addCounty = (countyName === '' ? (countyRef.current.value) : countyName)\r\n        const dob = (dateOfBirth === '' ? '1900-01-01': dateOfBirth)\r\n        const mail = (errors === ''? email : currentUser.email)\r\n        console.log(mail)\r\n        console.log(addLine1 + '' + addLine2 + ' ' + addCity+' '+addCounty)\r\n        console.log(emailRef.current.value)\r\n        console.log('dbs checked before sending to db is '+DBSChecked)\r\n        console.log('longit before sending to db'+long)\r\n        console.log('latit before sending to db'+lat)\r\n        if(emailRef.current.value === \"\" || emailRef.current.value === null) {\r\n            // setMessage(\"Data has been updated successfully\")\r\n                console.log(formData)\r\n        }\r\n        else {\r\n        if (passwordRef.current.value !== passwordConfirmRef.current.value) {\r\n            return setErrors(\"Passwords does not match\")\r\n        }\r\n        const promises = []\r\n        setLoading(true)\r\n        setErrors(\"\")\r\n          if  (emailRef.current.value !== currentUser.email) { \r\n            //   setFormData({ email : (emailRef.current.value) }\r\n              promises.push(updateEmail(emailRef.current.value))\r\n          }\r\n          if (passwordRef.current.value) {\r\n            promises.push(updatePassword(passwordRef.current.value))\r\n          }\r\n      \r\n          Promise.all(promises)\r\n            .then(() => {\r\n            //   history.push(\"/helpwhoneeds/\")\r\n            \r\n            })\r\n            .catch((error) => {\r\n              setErrors(error.message)\r\n              console.log(errors)\r\n            })\r\n            .finally(() => {\r\n              setLoading(false)\r\n            }) \r\n        }\r\n        axios.patch('https://letmeknow.uk/api/accounts/'+id+'/',\r\n        \r\n         { \r\n            first_name: `${formData.firstName}`,\r\n            last_name: `${formData.lastName}`,\r\n            email: `${mail}`,\r\n            date_of_birth: `${dob}`,\r\n            phone_number: `${formData.phoneNumber}`,\r\n            post_code: `${formData.postcode}`,\r\n            address_line_1: `${addLine1}`,\r\n            address_line_2: `${addLine2}`,\r\n            city: `${addCity}`,\r\n            county: `${addCounty}`,\r\n            dbs: DBSChecked,\r\n            latitude: `${lat}`,\r\n            longitude: `${long}`,\r\n         },\r\n        )\r\n       .then(function (response) {\r\n        console.log(response);\r\n        setSuccessMessage(\"Data has been updated successfully\")\r\n        console.log('dbs when on databse is'+DBSChecked)\r\n        console.log(successMessage)\r\n        // history.push(\"/profile/\")\r\n      })\r\n       .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n     console.log(successMessage)\r\n    }\r\n    const handleClick = (e) => {\r\n        e.preventDefault();\r\n        axios.get(`https://api.getAddress.io/find/${postcodeRef.current.value}?api-key=${process.env.REACT_APP_POSTCODE_API_KEY}`)\r\n          .then(function (response) {\r\n            const responseData = response.data\r\n            setLat(responseData.latitude)\r\n            setLong(responseData.longitude)\r\n            console.log(responseData)\r\n            console.log('lat is'+lat)\r\n            console.log('long is'+long)\r\n            setAddressList(responseData.addresses)\r\n            addressList === ' ' ? setErrorpostcode('No addresses found at the given post code') :\r\n              setpostCodeSearched(true)\r\n            console.log(addressList)\r\n          })\r\n          .catch(error => {\r\n            setNotifyMsg({\r\n                isOpen: true,\r\n                message:\r\n                    \"No addresses found at the given post code\",\r\n                type: \"error\",\r\n            })\r\n            console.log(errorpostcode);\r\n          })\r\n      }\r\n      const updateAddress = (e) => {\r\n        console.log(e)  \r\n        const valueList = [...e.target.selectedOptions].map(opt => opt.value);\r\n        if ({ valueList } !== '') {\r\n          let addressStore = valueList.toString().split(',')\r\n          console.log(addressStore)\r\n        //   setLat()\r\n          setAddressLine1(addressStore[0])\r\n          setAddressLine2(addressStore[1])\r\n          setCityName(addressStore[5])\r\n          setCountyName(addressStore[6])\r\n        }\r\n      }    \r\n\r\n    return (\r\n\r\n        <React.Fragment>\r\n        <div style={{ width: \"80vw\" }}> \r\n            <h4 align=\"center\"> My Profile</h4>\r\n             { !errors && successMessage && <Alert severity=\"success\">\r\n                <AlertTitle>{successMessage}</AlertTitle>\r\n            </Alert>}\r\n            { errors && <Alert severity=\"error\">\r\n                <AlertTitle>{errors}</AlertTitle>\r\n            </Alert>}\r\n            <Grid container flex-start=\"left\" >\r\n                <p style={{ paddingLeft: 8 }}>Please enter your details here</p> </Grid>\r\n\r\n            <form onSubmit={handleSubmit} >\r\n                \r\n                <Grid container spacing={3} >\r\n                    <Grid item xs={12} sm={6}>\r\n                        <TextField                        \r\n                            id=\"firstName\"\r\n                            type=\"text\"\r\n                            name=\"firstName\"\r\n                            label=\"First name\"\r\n                            variant=\"outlined\"\r\n                            // inputRef ={firstnameRef}\r\n                            onChange={handleChange}\r\n                            value={firstName||''}\r\n                            style={useStyles.textFld}\r\n                            autoComplete=\"given-name\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} >\r\n                        <TextField                            \r\n                            id=\"lastName\"\r\n                            name=\"lastName\"\r\n                            type=\"text\"\r\n                            label=\"Last name\"\r\n                            variant=\"outlined\"\r\n                            onChange={handleChange}\r\n                            value={lastName||''}\r\n                            style={useStyles.textFld}\r\n                            autoComplete=\"family-name\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                            id=\"dateOfBirth\"\r\n                            name=\"dateOfBirth\"\r\n                            type=\"date\"\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            inputProps={{ max: getFormDate(new Date()) }}\r\n                            label=\"Date Of Birth\"\r\n                            onChange={handleChange}\r\n                            value={dateOfBirth||''}\r\n                            variant=\"outlined\"\r\n                            style={useStyles.textFld}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                        required\r\n                        id=\"phoneNumber\"\r\n                        name=\"phoneNumber\"\r\n                        // type=\"number\"\r\n                        label=\"Phone Number\"\r\n                        onChange={handleChange}\r\n                        value={phoneNumber || ''}\r\n                        variant=\"outlined\"\r\n                        inputProps={{ maxLength: 12 }}\r\n                        style={useStyles.textFld}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                    <ButtonGroup>\r\n                    <TextField\r\n                        required\r\n                        id=\"postcode\"\r\n                        name=\"postcode\"\r\n                        label=\"Post code\"\r\n                        variant=\"outlined\"\r\n                        onChange={handleChange}\r\n                        inputRef={postcodeRef}\r\n                        value={postcode || ''}\r\n                        style={useStyles.textFld}\r\n                        autoComplete=\" postal-code\" />\r\n                    <Grid item xs={12} sm={6}>\r\n                        <Button variant=\"outlined\" type='submit' onClick={handleClick}>Find Address</Button>\r\n                    </Grid></ButtonGroup>  </Grid>\r\n\r\n                    <Grid item xs={12} sm={6}>\r\n                    {(postCodeSearched) &&\r\n                    <FormControl variant=\"outlined\" style={{ width: '100%', height: 40, paddingLeft: 8 }}>\r\n                        <InputLabel htmlFor=\"outlined-age-native-simple\">Select Addresses</InputLabel>\r\n                        <Select\r\n                        native\r\n                        id=\"demo-simple-select-outlined\"\r\n                        labelId=\"demo-simple-select-outlined-label\"\r\n                        style={useStyles.textFld}\r\n                        variant=\"outlined\"\r\n                        label=\"Select Addresses\"\r\n                        onChange={updateAddress}\r\n                        >\r\n                          <option value='' selected> </option>  \r\n                        {addressList.map(addressArray => <option key={addressArray} value={addressArray}>{addressArray}</option>)}\r\n                        </Select>\r\n                    </FormControl>}\r\n                     {errorpostcode &&  <Notification notify={notifyMsg} setNotify={setNotifyMsg} verticalPosTop={false}/>}\r\n                \r\n                     {/* <Alert severity=\"error\">This is an error message!</Alert>\r\n                    //                 <Alert severity=\"error\">\r\n                    // <AlertTitle>Error: {errorpostcode}</AlertTitle>\r\n                    // </Alert> */}\r\n                    \r\n                </Grid>\r\n\r\n                    <Grid item xs={12}>\r\n                    {(!postCodeSearched) &&\r\n                    <TextField\r\n                        required\r\n                        id=\"address1\"\r\n                        name=\"address1\"\r\n                        label=\"Address line 1\"\r\n                        onChange={handleChange}\r\n                        inputRef={address1Ref}\r\n                        value={address1||''}\r\n                        variant=\"outlined\"\r\n                        style={useStyles.textFld}\r\n                        autoComplete=\"address-line1\"\r\n                    />}\r\n                    {(postCodeSearched) &&\r\n                    <TextField\r\n                        required\r\n                        id=\"address1\"\r\n                        name=\"address1\"\r\n                        label=\"Address line 1\"\r\n                        value={addressLine1||''}\r\n                        variant=\"outlined\"\r\n                        style={useStyles.textFld}\r\n                        autoComplete=\"address-line1\"\r\n                    />\r\n                    }\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                    {(!postCodeSearched) &&\r\n                    <TextField\r\n                        id=\"address2\"\r\n                        name=\"address2\"\r\n                        label=\"Address line 2\"\r\n                        onChange={handleChange}\r\n                        inputRef={address2Ref}\r\n                        value={address2||''}\r\n                        variant=\"outlined\"\r\n                        style={useStyles.textFld}\r\n                        autoComplete=\"address-line2\"\r\n                    />}\r\n                    {(postCodeSearched) &&\r\n                    <TextField\r\n                        id=\"address2\"\r\n                        name=\"address2\"\r\n                        label=\"Address line 2\"\r\n                        value={addressLine2||''}\r\n                        variant=\"outlined\"\r\n                        style={useStyles.textFld}\r\n                        autoComplete=\"address-line2\"\r\n                    />\r\n                    }\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                    {(!postCodeSearched) &&\r\n                    <TextField\r\n                        required\r\n                        id=\"city\"\r\n                        name=\"city\"\r\n                        label=\"City\"\r\n                        onChange={handleChange}\r\n                        inputRef={cityRef}\r\n                        value={city||''}\r\n                        variant=\"outlined\"\r\n                        style={useStyles.textFld}\r\n                        autoComplete=\"city\"\r\n                    />}\r\n                    {(postCodeSearched) &&\r\n                    <TextField\r\n                        required\r\n                        id=\"city\"\r\n                        name=\"city\"\r\n                        label=\"City\"\r\n                        value={cityName||''}\r\n                        variant=\"outlined\"\r\n                        style={useStyles.textFld}\r\n                        autoComplete=\"city\"\r\n                    />\r\n                    }\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                    {(!postCodeSearched) &&\r\n                    <TextField\r\n                        id=\"county\"\r\n                        name=\"county\"\r\n                        label=\"County\"\r\n                        onChange={handleChange}\r\n                        inputRef={countyRef}\r\n                        value={county||''}\r\n                        variant=\"outlined\"\r\n                        style={useStyles.textFld}\r\n                        autoComplete=\"county\"\r\n                    />}\r\n                    {(postCodeSearched) &&\r\n                    <TextField\r\n                        id=\"county\"\r\n                        name=\"county\"\r\n                        label=\"County\"\r\n                        value={countyName || ''}\r\n                        variant=\"outlined\"\r\n                        style={useStyles.textFld}\r\n                        autoComplete=\"county\"\r\n                    />\r\n                    }\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            type = \"email\"\r\n                            label=\"Email Address\"\r\n                            inputRef={emailRef || ''}\r\n                            onChange={handleChange}\r\n                            value={email || ''}\r\n                            variant=\"outlined\"\r\n                            style={useStyles.textFld}\r\n                     />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                            id=\"password\"\r\n                            name=\"password\"\r\n                            type = \"password\"\r\n                            label=\"Password\"\r\n                            inputRef={passwordRef}\r\n                            variant=\"outlined\"\r\n                            style={useStyles.textFld}\r\n                     />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                            id=\"passwordConfirm\"\r\n                            name=\"city\"\r\n                            type = \"password\"\r\n                            label=\"Confirm Password\"\r\n                            inputRef={passwordConfirmRef}\r\n                            variant=\"outlined\"\r\n                            style={useStyles.textFld}\r\n                     />\r\n                    </Grid>\r\n                  \r\n                    <Grid item xs={12}>\r\n\r\n                        {(isVolunteer === true) && (DBSChecked === true) &&\r\n                            <FormControlLabel\r\n                                control={<Checkbox color=\"secondary\" style={{ marginLeft: '5px' }} name=\"DBSChecked\" value={DBSChecked} checked=\"checked\" onChange={handleChecked}  />}\r\n                                label=\"I have a valid DBS certificate\"\r\n                            />}\r\n                          {(isVolunteer === true) && (DBSChecked === false) &&\r\n                            <FormControlLabel\r\n                                control={<Checkbox color=\"secondary\" style={{ marginLeft: '5px' }} name=\"DBSChecked\" value={DBSChecked} onChange={handleChecked}  />}\r\n                                label=\"I have a valid DBS certificate\"\r\n                            />}  \r\n\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container justify=\"center\" spacing={3} direction=\"row\">\r\n                    <ButtonGroup className=\"w-100 text-center mt-2\">\r\n                        <Grid item xs={12} >\r\n                            <Button disabled = {loading} variant=\"contained\" style={useStyles.button} className=\"btn btn-primary w-100\" type=\"submit\">Update</Button>\r\n                        </Grid>\r\n                        <Grid item xs={12} >\r\n                            <Button variant=\"contained\" style={useStyles.button} className=\"btn btn-primary w-100\" component={Link} to=\"/helpwhoneeds/\" >Cancel</Button>\r\n                        </Grid>\r\n                    </ButtonGroup>\r\n                </Grid>\r\n        \r\n            </form> \r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import React, { useRef, useState } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport AlertTitle from '@material-ui/lab/AlertTitle';\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\n\r\nfunction Copyright() {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n            {\"Copyright © \"}\r\n            <Link color=\"inherit\" to=\"https://material-ui.com/\">\r\n                Your Website\r\n    </Link>{\" \"}\r\n            {new Date().getFullYear()}\r\n            {\".\"}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: \"100%\", \r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\n\r\n\r\nexport default function ForgotPassword() {\r\n\r\n  const classes = useStyles();  \r\n  const emailRef = useRef()\r\n  const { resetPassword } = useAuth()\r\n  const [error, setError] = useState(\"\")\r\n  const [message, setMessage] = useState(\"\")\r\n  const [loading, setLoading] = useState(false)\r\n  const param = useParams();\r\n  const user = param.user;\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault()\r\n\r\n    try {\r\n      setMessage(\"\")\r\n      setError(\"\")\r\n      setLoading(true)\r\n      await resetPassword(emailRef.current.value)\r\n      setMessage(\"Check your inbox for password reset instructions\")\r\n    } catch {\r\n      setError(\"Failed to reset password\")\r\n    }\r\n\r\n    setLoading(false)\r\n  }\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n            <Avatar className={classes.avatar}>\r\n                <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\"> Forgot Password </Typography>\r\n            { error && <Alert severity=\"error\">\r\n            <AlertTitle>Error: {error}</AlertTitle>\r\n            </Alert>}\r\n            { message && <Alert severity=\"success\">\r\n            <AlertTitle>{message}</AlertTitle>\r\n            </Alert>}\r\n            <form onSubmit={handleSubmit} > \r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    type=\"email\" \r\n                    inputRef={emailRef} \r\n                    id=\"email\"\r\n                    label=\"Email Address\"\r\n                    // autoFocus\r\n                />\r\n                <Button            \r\n                                type=\"submit\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                disabled = {loading}\r\n                                color=\"primary\"\r\n                            >Reset Password\r\n                </Button>\r\n              </form>\r\n             <Grid container>\r\n                        <Grid item xs>\r\n                            <div  className=\"w-100 text-center mt-2\">\r\n                            Go to <Link to={`/login/${user}`} variant=\"body2\">\r\n                                Sign In</Link> \r\n                            </div>\r\n                        </Grid>\r\n              </Grid>\r\n              <Grid container>          \r\n                        <Grid item xs>\r\n                            <div  className=\"w-100 text-center mt-3\">\r\n                            New User ?<Link to={`/signup/${user}`} variant=\"body2\">\r\n                                Sign Up </Link> \r\n                            </div>\r\n                        </Grid>\r\n                       \r\n        </Grid>\r\n\r\n    </div>  <Box mt={8}>\r\n    <Copyright />\r\n</Box>\r\n</Container>\r\n)\r\n}","import React, { useState, useRef } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { useParams } from \"react-router-dom\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport AlertTitle from '@material-ui/lab/AlertTitle';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport axios from \"axios\"\r\nimport { ButtonGroup, Input } from '@material-ui/core';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport { useAuth } from \"../../contexts/AuthContext\"\r\nimport Notification from \"../structure/Notification\"\r\n\r\nconst useStyles = {\r\n  textFld: { width: '85%', height: 40, paddingLeft: 8 },\r\n  button: {\r\n    border: '4px',\r\n    fontWeight: 'bold',\r\n    marginLeft: 10,\r\n    marginTop: '10px',\r\n  },\r\n};\r\n\r\nexport default function RegistrationPage(props) {\r\n\r\n  const initialInputState = {\r\n    firstName: \"\", lastName: \"\", dateOfBirth: \"\", phoneNumber: \"\", postcode: \"\", address1: \"\", address2: \"\",city: \"\", county: \"\"\r\n  }\r\n  const [formData, setFormData] = useState({ initialInputState })\r\n  const { firstName, lastName, dateOfBirth, phoneNumber, postcode, address1, address2, city, county } = formData\r\n  const [message, setMessage] = useState(\"\")\r\n  const postcodeRef = useRef()\r\n  const address1Ref = useRef()\r\n  const address2Ref = useRef()\r\n  const cityRef = useRef()\r\n  const countyRef = useRef()\r\n  const [countyName, setCountyName] = useState(\"\");\r\n  const [cityName, setCityName] = useState(\"\");\r\n  const param = useParams();\r\n  const user = param.user;\r\n  const { currentUser } = useAuth()\r\n  const uID = currentUser.uid\r\n  const email = currentUser.email\r\n  const [DBSchecked, setDBSChecked] = useState(false);\r\n  const [addressLine1, setAddressLine1] = useState(\"\")\r\n  const [addressLine2, setAddressLine2] = useState(\"\")\r\n  const [addressList, setAddressList] = useState(\"\");\r\n  const [errors, setErrors] = useState(\"\");\r\n  // const [errorDob, setErrorDob] = useState(\"\");\r\n  const [long, setLong] = useState()\r\n  const [lat, setLat] = useState()\r\n  const [postCodeSearched, setpostCodeSearched] = useState(false);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [notifyMsg, setNotifyMsg] = useState({\r\n      isOpen: false,\r\n      message: \" \",\r\n      type: \" \",\r\n  });\r\n  // const [isVolunteer, setIsVolunteer] = useState(false);\r\n\r\n  const getFormDate = date => {\r\n    let year = date.getFullYear();\r\n    let month = (1 + date.getMonth()).toString().padStart(2, '0');\r\n    let day = date.getDate().toString().padStart(2, '0');\r\n    return year + '-' + month + '-' + day\r\n}\r\n  const handleChange = (e) => {\r\n    \r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  }\r\n\r\n  const handleChecked = (e) => {\r\n    setDBSChecked(e.target.checked)\r\n    console.log(DBSchecked)\r\n  }\r\n  async function handleSubmit(evt) {\r\n    evt.preventDefault();\r\n    const is_volunteer = (user === 'volunteer' ? true : false)\r\n    console.log(is_volunteer + ' ' + county + ' ' + uID + ' ' + DBSchecked);\r\n    const addLine1 = (addressLine1 === '' ? (address1Ref.current.value) : addressLine1)\r\n    const addLine2 = (addressLine2 === '' ? (address2Ref.current.value) : addressLine2)\r\n    const addCity = (cityName === '' ? (cityRef.current.value) : cityName)\r\n    const addCounty = (countyName === '' ? (countyRef.current.value) : countyName)\r\n    console.log('dob before'+dateOfBirth)\r\n    const dob = (dateOfBirth === undefined ? '1900-01-01' : dateOfBirth)\r\n    console.log('dob after'+dob)\r\n    console.log(addLine1 + '' + addLine2 + ' ' + addCity+' '+addCounty)\r\n    console.log('longit before sending to db'+long)\r\n    console.log('latit before sending to db'+lat)\r\n\r\n    axios.post(\"https://letmeknow.uk/api/accounts/\", {\r\n      first_name: `${formData.firstName}`,\r\n      last_name: `${formData.lastName}`,\r\n      uid: `${uID}`,\r\n      email: `${email}`,\r\n      date_of_birth: `${dob}`,\r\n      phone_number: `${formData.phoneNumber}`,\r\n      post_code: `${formData.postcode}`,\r\n      address_line_1: `${addLine1}`,\r\n      address_line_2: `${addLine2}`,\r\n      city: `${addCity}`,\r\n      county: `${addCounty}`,\r\n      dbs: `${DBSchecked}`,\r\n      is_volunteer: `${is_volunteer}`,\r\n      latitude: lat,\r\n      longitude: long,\r\n    })\r\n      .then(function (response) {\r\n        console.log(response);\r\n        setMessage(\"Data has been saved successfully\")\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  const handleClick = (e) => {\r\n    e.preventDefault();\r\n    const API_Key = process.env.REACT_APP_POSTCODE_API_KEY\r\n    axios.get(`https://api.getAddress.io/find/${postcodeRef.current.value}?api-key=${API_Key}`)\r\n      .then(function (response) {\r\n        const responseData = response.data\r\n        console.log(responseData.latitude)\r\n        setLat(responseData.latitude)\r\n        setLong(responseData.longitude)\r\n        console.log('lat is'+lat)\r\n        console.log('long is'+long)\r\n        setAddressList(responseData.addresses)\r\n        addressList === ' ' ? setErrors('No addresses found at the given post code') :\r\n          setpostCodeSearched(true)\r\n        console.log(addressList)\r\n      })\r\n      .catch(error => {\r\n        setErrors('No addresses found at the given post code')\r\n        setNotifyMsg({\r\n          isOpen: true,\r\n          message:\r\n              \"No addresses found at the given post code\",\r\n          type: \"error\",\r\n      })\r\n        console.log(error);\r\n      })\r\n  }\r\n  const updateAddress = (e) => {\r\n    const valueList = [...e.target.selectedOptions].map(opt => opt.value);\r\n    if ({ valueList } !== '') {\r\n      let addressStore = valueList.toString().split(',')\r\n      console.log(addressStore)\r\n      setAddressLine1(addressStore[0])\r\n      setAddressLine2(addressStore[1])\r\n      setCityName(addressStore[5])\r\n      setCountyName(addressStore[6])\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n\r\n      <h2 align=\"center\"> Registration form</h2>\r\n      { message && <Alert severity=\"success\">\r\n        <AlertTitle>{message}</AlertTitle>\r\n      </Alert>}\r\n      <Grid container flex-start=\"left\" >\r\n        <p style={{ paddingLeft: 8 }}>Please enter your details here</p> </Grid>\r\n\r\n      <form onSubmit={handleSubmit} >\r\n        <Grid container spacing={3} >\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              required\r\n              id=\"firstName\"\r\n              type=\"text\"\r\n              name=\"firstName\"\r\n              label=\"First name\"\r\n              variant=\"outlined\"\r\n              onChange={handleChange}\r\n              value={firstName || ''}\r\n              inputProps={{ maxLength: 20 }}\r\n              style={useStyles.textFld}\r\n              autoComplete=\"given-name\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6} >\r\n            <TextField\r\n              required\r\n              id=\"lastName\"\r\n              name=\"lastName\"\r\n              type=\"text\"\r\n              label=\"Last name\"\r\n              onChange={handleChange}\r\n              value={lastName || ''}\r\n              inputProps={{ maxLength: 20 }}\r\n              variant=\"outlined\"\r\n              style={useStyles.textFld}\r\n              autoComplete=\"family-name\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              id=\"dateOfBirth\"\r\n              name=\"dateOfBirth\"\r\n              type=\"date\"\r\n              InputLabelProps={{\r\n                shrink: true,\r\n              }}\r\n              inputProps={{ max: getFormDate(new Date()) }}\r\n              label=\"Date Of Birth\"\r\n              onChange={handleChange}\r\n              value={dateOfBirth || ''}\r\n              variant=\"outlined\"\r\n              style={useStyles.textFld}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              id=\"phoneNumber\"\r\n              name=\"phoneNumber\"\r\n              label=\"Phone Number\"\r\n              type='number'\r\n              onChange={handleChange}\r\n              value={phoneNumber || ''}\r\n              variant=\"outlined\"\r\n              inputProps={{ maxLength: 11 }}\r\n              style={useStyles.textFld}\r\n              // helperText='Phone number should start with 0 or +44'\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={6}>\r\n\r\n            <ButtonGroup>\r\n              <TextField\r\n                required\r\n                id=\"postcode\"\r\n                name=\"postcode\"\r\n                label=\"Post code\"\r\n                variant=\"outlined\"\r\n                onChange={handleChange}\r\n                inputRef={postcodeRef}\r\n                value={postcode || ''}\r\n                style={useStyles.textFld}\r\n                autoComplete=\" postal-code\" />\r\n              <Grid item xs={12} sm={6}>\r\n                <Button variant=\"outlined\" type='submit' onClick={handleClick}>Find Address</Button>\r\n              </Grid></ButtonGroup>  </Grid>\r\n\r\n          <Grid item xs={12} sm={6}>\r\n            {(postCodeSearched) &&\r\n              <FormControl variant=\"outlined\" style={{ width: '100%', height: 40, paddingLeft: 8 }}>\r\n                <InputLabel htmlFor=\"outlined-age-native-simple\">Select Addresses</InputLabel>\r\n                <Select\r\n                  native\r\n                  id=\"demo-simple-select-outlined\"\r\n                  labelId=\"demo-simple-select-outlined-label\"\r\n                  style={useStyles.textFld}\r\n                  variant=\"outlined\"\r\n                  label=\"Select Addresses\"\r\n                  onChange={updateAddress}\r\n                >\r\n                  <option value='' selected> </option>\r\n                  {addressList.map(addressArray => <option key={addressArray} value={addressArray}>{addressArray}</option>)}\r\n                </Select>\r\n              </FormControl>}\r\n\r\n              {errors &&  <Notification notify={notifyMsg} setNotify={setNotifyMsg} verticalPosTop={false}/>}\r\n\r\n          </Grid>\r\n\r\n          <Grid item xs={12}>\r\n            {(!postCodeSearched) &&\r\n              <TextField\r\n                required\r\n                id=\"address1\"\r\n                name=\"address1\"\r\n                label=\"Address line 1\"\r\n                onChange={handleChange}\r\n                inputRef={address1Ref}\r\n                value={address1||''}\r\n                variant=\"outlined\"\r\n                style={useStyles.textFld}\r\n                autoComplete=\"address-line1\"\r\n              />}\r\n            {(postCodeSearched) &&\r\n              <TextField\r\n                required\r\n                id=\"address1\"\r\n                name=\"address1\"\r\n                label=\"Address line 1\"\r\n                value={addressLine1||''}\r\n                variant=\"outlined\"\r\n                style={useStyles.textFld}\r\n                autoComplete=\"address-line1\"\r\n              />\r\n            }\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            {(!postCodeSearched) &&\r\n              <TextField\r\n                id=\"address2\"\r\n                name=\"address2\"\r\n                label=\"Address line 2\"\r\n                onChange={handleChange}\r\n                inputRef={address2Ref}\r\n                value={address2||''}\r\n                variant=\"outlined\"\r\n                style={useStyles.textFld}\r\n                autoComplete=\"address-line2\"\r\n              />}\r\n            {(postCodeSearched) &&\r\n              <TextField\r\n                id=\"address2\"\r\n                name=\"address2\"\r\n                label=\"Address line 2\"\r\n                value={addressLine2||''}\r\n                variant=\"outlined\"\r\n                style={useStyles.textFld}\r\n                autoComplete=\"address-line2\"\r\n              />\r\n            }\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            {(!postCodeSearched) &&\r\n              <TextField\r\n                required\r\n                id=\"city\"\r\n                name=\"city\"\r\n                label=\"City\"\r\n                onChange={handleChange}\r\n                inputRef={cityRef}\r\n                value={city||''}\r\n                variant=\"outlined\"\r\n                style={useStyles.textFld}\r\n                autoComplete=\"city\"\r\n              />}\r\n            {(postCodeSearched) &&\r\n              <TextField\r\n                required\r\n                id=\"city\"\r\n                name=\"city\"\r\n                label=\"City\"\r\n                value={cityName||''}\r\n                variant=\"outlined\"\r\n                style={useStyles.textFld}\r\n                autoComplete=\"city\"\r\n              />\r\n            }\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            {(!postCodeSearched) &&\r\n              <TextField\r\n                id=\"county\"\r\n                name=\"county\"\r\n                label=\"County\"\r\n                onChange={handleChange}\r\n                inputRef={countyRef}\r\n                value={county||''}\r\n                variant=\"outlined\"\r\n                style={useStyles.textFld}\r\n                autoComplete=\"county\"\r\n              />}\r\n            {(postCodeSearched) &&\r\n              <TextField\r\n                id=\"county\"\r\n                name=\"county\"\r\n                label=\"County\"\r\n                value={countyName || ''}\r\n                variant=\"outlined\"\r\n                style={useStyles.textFld}\r\n                autoComplete=\"county\"\r\n              />\r\n            }\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n\r\n            {(`${user}` === 'volunteer') &&\r\n              <FormControlLabel\r\n                control={<Checkbox color=\"secondary\" style={{ marginLeft: '5px' }} name=\"DBSchecked\" value={DBSchecked} onChange={handleChecked} />}\r\n                label=\"I have a valid DBS certificate\"\r\n              />}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container justify=\"center\" spacing={3} direction=\"row\">\r\n          <Grid item xs={12} align=\"center\">\r\n            <Button variant=\"contained\" className=\"btn btn-primary w-100\" type=\"submit\">Submit</Button>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </React.Fragment>\r\n\r\n  )\r\n}","import Button from \"@material-ui/core/Button\";\r\nimport {\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n} from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\nconst useStyles = (theme) => ({\r\n    textFld: { width: \"85%\", height: 40, paddingLeft: 8 },\r\n    button: {\r\n        border: \"4px\",\r\n        color: \"default\",\r\n        fontWeight: \"bold\",\r\n        marginLeft: 10,\r\n        marginTop: \"10px\",\r\n    },\r\n    form: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        margin: \"auto\",\r\n        width: \"fit-content\",\r\n    },\r\n});\r\n\r\nconst TaskDialog = ({ open, handleClose, title, data }) => {\r\n    const theme = useTheme();\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n    console.log(data);\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                fullScreen={fullScreen}\r\n                aria-labelledby=\"responsive-dialog-title\"\r\n            >\r\n                <DialogTitle>{title}</DialogTitle>\r\n                <DialogContent>\r\n                    <form className={useStyles.form} noValidate>\r\n                        {data && (\r\n                            <Grid container spacing={3}>\r\n                                {data.firstName} {data.lastName}\r\n                                <Grid item xs={12} sm={12}>\r\n                                    <TextField\r\n                                        id=\"taskType\"\r\n                                        type=\"string\"\r\n                                        label=\"Task\"\r\n                                        value={data.taskType}\r\n                                        variant=\"outlined\"\r\n                                        style={useStyles.textFld}\r\n                                        autoComplete=\"family-name\"\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={12}>\r\n                                    <TextField\r\n                                        id=\"taskDetails\"\r\n                                        type=\"string\"\r\n                                        label=\"Task Summary\"\r\n                                        value={data.taskDetails}\r\n                                        variant=\"outlined\"\r\n                                        multiline\r\n                                        rows={6}\r\n                                        style={useStyles.textFld}\r\n                                        autoComplete=\"family-name\"\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6}></Grid>\r\n                                <Grid item xs={12} sm={6}></Grid>\r\n                            </Grid>\r\n                        )}\r\n                    </form>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={handleClose} color=\"primary\">\r\n                        Close\r\n          </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TaskDialog;\r\n","import {\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n    makeStyles,\r\n} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n    dailog: {\r\n        padding: theme.spacing(2),\r\n        position: \"absolute\",\r\n        top: theme.spacing(15),\r\n    },\r\n    dailogContent: {\r\n        textAlign: \"center\",\r\n    },\r\n    dailogAction: {\r\n        justifyContent: \"center\",\r\n    }\r\n\r\n}));\r\n\r\nconst ConfirmDialog = (props) => {\r\n    const classes = useStyles();\r\n    const { confirmDialog, setConfirmDialog } = props;\r\n\r\n    return (\r\n        <Dialog open={confirmDialog.isOpen}\r\n            className={classes.dailog}>\r\n            <DialogTitle>\r\n                <Typography variant=\"h6\">{confirmDialog.title}</Typography>\r\n            </DialogTitle>\r\n            <DialogContent className={classes.dailogContent}>\r\n                <Typography variant=\"subtitle2\">{confirmDialog.subTitle}</Typography>\r\n            </DialogContent>\r\n            <DialogActions className={classes.dailogAction}>\r\n                <Button variant=\"contained\"\r\n                    size=\"small\"\r\n                    style={{ minWidth: '90px' }}\r\n                    onClick={confirmDialog.onConfirm}\r\n                >\r\n                    OK\r\n        </Button>\r\n                <Button variant=\"contained\"\r\n                    size=\"small\"\r\n                    style={{ minWidth: '90px' }}\r\n                    onClick={() => setConfirmDialog({ ...ConfirmDialog, isOpen: false })}\r\n                >\r\n                    Cancel\r\n        </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\n\r\nexport default ConfirmDialog;","import React from \"react\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport { createMuiTheme, MuiThemeProvider } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport moment from \"moment\";\r\n\r\nconst SPACED_DATE_FORMAT = \"DD MMM YYYY\";\r\n\r\nconst options = {\r\n    filterType: \"multiselect\",\r\n    selectableRows: \"none\", //can also be single/mulitple\r\n    rowsPerPage: 5,\r\n    rowsPerPageOptions: [5, 10, 15, 20],\r\n    print: false,\r\n    download: false,\r\n    sortOrder: {\r\n        name: \"start\",\r\n        direction: \"asc\",\r\n    },\r\n};\r\n\r\nexport default function TaskListTable({\r\n    taskListData,\r\n    isMyTask,\r\n    handleAccept,\r\n    handleView,\r\n    handleReject,\r\n    handleComplete,\r\n}) {\r\n    const theme = () =>\r\n        createMuiTheme({\r\n            overrides: {\r\n                MuiDataTable: {\r\n                    root: {\r\n                        width: \"min-content\",\r\n                    },\r\n                    responsiveScroll: {\r\n                        maxHeight: \"none\", //not working\r\n                    },\r\n                },\r\n                MUIDataTableToolbar: {\r\n                    root: {\r\n                        background: \"#AAF\",\r\n                    },\r\n                },\r\n                MUIDataTableBodyCell: {\r\n                    root: {\r\n                        overflow: \"hidden\",\r\n                        whiteSpace: \"nowrap\",\r\n                        textOverflow: \"ellipsis\",\r\n                        position: \"relative\",\r\n                        backgroundColor: \"#FFF\",\r\n                    },\r\n                },\r\n            },\r\n        });\r\n    const taskCols = [\r\n        {\r\n            name: \"id\",\r\n            label: \"ID\",\r\n            options: {\r\n                display: false,\r\n                sort: false,\r\n                filter: false,\r\n                viewColumns: false,\r\n            },\r\n        },\r\n        {\r\n            name: \"volId\",\r\n            label: \"volunteer ID\",            \r\n            options: { display: false, sort: false, filter: false, viewColumns: false },\r\n        },\r\n        {\r\n            name: \"status\",\r\n            label: \"State\",         \r\n            options: {\r\n                display: false,\r\n                filter: false,\r\n                sort: false,\r\n                viewColumns: false,\r\n                width: \"10%\",\r\n            },\r\n        },\r\n        {\r\n            name: \"firstName\",\r\n            label: \"First name\",\r\n\r\n            options: {\r\n                display: false,\r\n                filter: true,\r\n                sort: true,\r\n            },\r\n        },\r\n        {\r\n            name: \"lastName\",\r\n            label: \"Last name\",\r\n\r\n            options: {\r\n                display: false,\r\n                filter: true,\r\n                sort: true,\r\n            },\r\n        },\r\n        {\r\n            name: \"firstName\",\r\n            label: \"Full Name\",\r\n            options: {\r\n                filter: false,\r\n                sort: true,\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                    //console.log(tableMeta.rowData, '......');\r\n                    return (\r\n                        <div>\r\n                            {tableMeta.rowData[3]} {tableMeta.rowData[4]}\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: \"taskType\",\r\n            label: \"Task\",\r\n\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n            },\r\n        },\r\n        {\r\n            name: \"start\",\r\n            label: \"Start Time\",\r\n            options: {\r\n                filter: false,\r\n                sort: true,\r\n                width: \"10%\",\r\n\r\n                customBodyRender: (value) => moment(value).format(\"lll\"),\r\n            },\r\n        },\r\n        {\r\n            name: \"end\",\r\n            label: \"End Time\",\r\n            options: {\r\n                filter: false,\r\n                sort: true,\r\n                width: \"10%\",\r\n                customBodyRender: (value) => moment(value).format(\"lll\"),\r\n            },\r\n        },\r\n        {\r\n            name: \"start\",\r\n            label: \"Start Date\",\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                display: false,\r\n                viewColumns: false,\r\n                customBodyRender: (value) =>\r\n                    moment(new Date(value)).format(SPACED_DATE_FORMAT),\r\n            },\r\n        },\r\n        {\r\n            name: \"end\",\r\n            label: \"End Date\",           \r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                display: false,\r\n                viewColumns: false,\r\n                customBodyRender: (value) =>\r\n                    moment(new Date(value)).format(SPACED_DATE_FORMAT),\r\n            },\r\n        },\r\n        {\r\n            name: \"distance\",\r\n            label: \"Dist(mi)\",\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                width: \"5%\",\r\n            },\r\n        },\r\n        {\r\n            name: \"postCode\",\r\n            label: \"Postcode\",\r\n            options: {\r\n                filter: true,\r\n                display: false,\r\n                viewColumns: true,\r\n                sort: true,\r\n                width: \"5%\",\r\n            },\r\n        },\r\n        {\r\n            name: \"id\",\r\n            label: \"Action\",\r\n\r\n            options: {\r\n                sort: false,\r\n                filter: false,\r\n                viewColumns: false,\r\n                display: isMyTask === true ? true : false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    //const volId = tableMeta.rowData[1];\r\n                    const status = tableMeta.rowData[2];\r\n                    return (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            size=\"small\"\r\n                            //disabled={(volId === null ||status === \"Completed\") ? true : false}\r\n                            disabled={status !== \"DN\" && status !== \"CL\" ? false : true}\r\n                            style={{ marginLeft: 2, minWidth: \"70px\" }}\r\n                            className=\"button\"\r\n                            value={value}\r\n                            onClick={() => {\r\n                                handleReject(value);\r\n                            }}\r\n                        >\r\n                            {status !== \"CL\" ? \"Reject\" : \"Cancelled\"}\r\n                        </Button>\r\n                    );\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: \"id\",\r\n            label: \"Confirm\",\r\n\r\n            options: {\r\n                sort: false,\r\n                filter: false,\r\n                viewColumns: false,\r\n                display: isMyTask === true ? true : false,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    const status = tableMeta.rowData[2];\r\n                    return (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"default\"\r\n                            size=\"small\"\r\n                            // disabled={ status !== \"Completed\" ? false : true}\r\n                            disabled={status !== \"DN\" && status !== \"CL\" ? false : true}\r\n                            style={{ marginLeft: 2, minWidth: \"90px\" }}\r\n                            className=\"button\"\r\n                            value={value}\r\n                            onClick={() => {\r\n                                handleComplete(value);\r\n                            }}\r\n                        >\r\n                            {status !== \"DN\" ? \"COMPLETE\" : \"DONE\"}\r\n                        </Button>\r\n                    );\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: \"id\",\r\n            label: \"Action\",\r\n\r\n            options: {\r\n                sort: false,\r\n                filter: false,\r\n                viewColumns: false,\r\n                display: isMyTask ? false : true,\r\n                customBodyRender: (value, tableMeta) => {\r\n                    //const volId = tableMeta.rowData[1];\r\n                    const status = tableMeta.rowData[2];\r\n                    return (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            //disabled={volId === null ? false : true}\r\n                            disabled={status !== \"OP\" ? true : false}\r\n                            style={{\r\n                                marginLeft: 2,\r\n                                backgroundColor: status !== \"OP\" ? \"lightgrey\" : \"green\",\r\n                            }}\r\n                            className=\"button\"\r\n                            value={value}\r\n                            onClick={() => {\r\n                                //console.log(tableMeta.rowData[1]);\r\n                                console.log(\"value\");\r\n                                console.log(value);\r\n                                handleAccept(value);\r\n                            }}\r\n                        >\r\n                            Accept\r\n                        </Button>\r\n                    );\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: \"id\",\r\n            label: \" Task Detail\",\r\n\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                viewColumns: false,\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                    return (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            style={{\r\n                                marginLeft: 2,\r\n                                minWidth: \"70px\",\r\n                            }}\r\n                            value={value}\r\n                            onClick={(e) => {\r\n                                handleView(e, value);\r\n                            }}\r\n                        >\r\n                            View\r\n                        </Button>\r\n                    );\r\n                },\r\n            },\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <MuiThemeProvider theme={theme()}>\r\n            <MUIDataTable\r\n                title={isMyTask === false ? \"New Tasks\" : \"My Pending Tasks\"}\r\n                data={taskListData}\r\n                columns={taskCols}\r\n                options={options}\r\n            />\r\n        </MuiThemeProvider>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TaskDialog from \"./TaskDetail\";\r\nimport ConfirmDialog from \"../structure/ConfirmDialog\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TaskListTable from \"./TaskListTable\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Hidden from \"@material-ui/core/Hidden\";\r\nimport axios from \"axios\";\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\nimport Notification from \"../structure/Notification\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    h5: {\r\n        color: \"#4C4B51\",\r\n        textAlign: \"center\",\r\n    },\r\n}));\r\n\r\nexport default function VolunteerSearchTask() {\r\n    const { currentUser } = useAuth();\r\n    const userUID = currentUser.uid;\r\n    console.log(userUID);\r\n    const [userId, setUserId] = useState(null);\r\n    const [pendingTasks, setPendingTasks] = useState([]);\r\n    const [dataFetched, setDataFetched] = useState(false);\r\n    const [taskStateUpdated, setTaskStateUpdated] = useState(true);\r\n    useEffect(() => {\r\n        axios\r\n            .get(\"https://letmeknow.uk/api/accounts/get_user_by_id/\", {\r\n                params: { uid: userUID },\r\n            })\r\n            .then((response) => {\r\n                //if (response.status === 200) {\r\n                const data = response.data;\r\n                console.log(\"userdata\");\r\n                console.log(data);\r\n                console.log(data[0]);\r\n                const user = {\r\n                    id: `${data[0].id}`,\r\n                };\r\n\r\n                console.log(\"userId by uuid\");\r\n                console.log(user.id);\r\n                setUserId(user.id);\r\n                /*}else{\r\n                            console.log(\"error in fetching user data\");                \r\n                        }*/\r\n            })\r\n            .catch(function (error) {\r\n                console.log(\"error\");\r\n                console.log(error.request);\r\n                console.log(error.config);\r\n                console.log(error.message);\r\n            });\r\n        console.log(\"set UserId\");\r\n        console.log(userId);\r\n    }, [userUID, userId]);\r\n\r\n    useEffect(() => {\r\n        axios            \r\n            .get(\"https://letmeknow.uk/api/tasks/get_vol_task\", {\r\n                params: {\r\n                    volId: userId,\r\n                },\r\n            })\r\n            .then((response) => {\r\n                //if (response.status === 200) {\r\n                const data = response.data;\r\n                console.log(data);\r\n                const allTask = data.map((task) => {\r\n                    return {\r\n                        id: `${task.id}`,\r\n                        lastName: `${task.requestee_details.last_name}`,\r\n                        firstName: `${task.requestee_details.first_name}`,                        \r\n                        taskType: `${task.task_type_details.task_type_name}`,\r\n                        taskDetails: `${task.description}`,\r\n                        start: `${task.start_time}`,\r\n                        end: `${task.end_time}`,\r\n                        distance: `${task.distance}`,\r\n                        volId: `${task.volunteer}`,\r\n                        status: `${task.status}`,\r\n                        postCode: `${task.requestee_details.post_code}`,\r\n                    \r\n                    };\r\n                });\r\n                setPendingTasks(allTask);\r\n                setDataFetched(true);\r\n                console.log(\"tasks\");\r\n                console.log(allTask);\r\n                /*}\r\n                        else{//error on getting data\r\n                            console.log(\"error in fetching data\");\r\n                        }*/\r\n            })\r\n            .catch(function (error) {\r\n                console.log(\"error\");\r\n                console.log(error.request);\r\n                console.log(error.config);\r\n                console.log(error.message);\r\n            });\r\n    }, [userId]);\r\n\r\n    console.log(\"database json out \");\r\n    console.log(pendingTasks);\r\n    const classes = useStyles();\r\n\r\n    const myTasks = pendingTasks\r\n        ? pendingTasks.filter(\r\n            (task) => task.status === \"AS\" //|| task.status === \"CL\" \r\n        )\r\n        : null;\r\n    const unassignedTasks = pendingTasks.filter(\r\n        (task) =>           \r\n            task.status === \"OP\"\r\n    );\r\n\r\n    const [hideMyTask, setHideMyTask] = useState(false);\r\n    const [hideNewTask, setHideNewTask] = useState(false);\r\n    const [showDialog, setShowDialog] = React.useState(false);\r\n    const [dialogData, setDialogData] = React.useState(null);\r\n    const [notifyMsg, setNotifyMsg] = useState({\r\n        isOpen: false,\r\n        message: \" \",\r\n        type: \" \",\r\n    });\r\n    const [confirmDialog, setConfirmDialog] = useState({\r\n        isOpen: false,\r\n        title: \"\",\r\n        subTitle: \"\",\r\n    });\r\n\r\n    const handleClickOpen = (e, dialogData) => {\r\n        setShowDialog(true);\r\n        setDialogData(dialogData);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setShowDialog(false);\r\n        setDialogData(null);\r\n    };\r\n\r\n    const handleView = (e, taskId) => {\r\n        const selectedTask = pendingTasks.find((task) => task.id === taskId);\r\n        console.log(selectedTask);\r\n        if (selectedTask != null) {\r\n            handleClickOpen(e, selectedTask);\r\n        }\r\n    };\r\n\r\n    const handleReject = (taskId) => {\r\n        setConfirmDialog({\r\n            isOpen: true,\r\n            title: \"Are you sure to cancel your assigned Task?\",\r\n            subTitle:\r\n                \"Once rejected you will no longer be able to see the task.To retake the task you need to go to Search Task and Accept it again.\",\r\n            onConfirm: () => {\r\n                setConfirmDialog({\r\n                    ...confirmDialog,\r\n                    isOpen: false,\r\n                });\r\n                setTaskStateUpdated(false);\r\n                axios\r\n                    .get(\"https://letmeknow.uk/api/tasks/\" + taskId + \"/\")\r\n                    .then((response) => {\r\n                        const data = response.data;\r\n                        console.log(data);\r\n                        const task = response.data;\r\n                        const selectedTask = {\r\n                            status: `${task.status}`,\r\n                        };\r\n                        console.log(\"slected tasks\");\r\n                        console.log(selectedTask);\r\n                        if (selectedTask.status === \"AS\") {\r\n                            axios\r\n                                .patch(\"https://letmeknow.uk/api/tasks/\" + taskId + \"/\", {\r\n                                    status: \"OP\",\r\n                                    volId: null,\r\n                                    isUpdatedByVol: true,\r\n                                })\r\n                                .then(function (response) {\r\n                                    console.log(response);\r\n                                    //change status is frontend\r\n                                    const returnTask = pendingTasks.map((task) =>\r\n                                        task.id === taskId\r\n                                            ? { ...task, volId: null, status: \"OP\" }\r\n                                            : task\r\n                                    );\r\n                                    setPendingTasks(returnTask);\r\n                                    console.log(\"myTask\");\r\n                                    console.log(myTasks);\r\n                                    console.log(\"assignTasks\");\r\n                                    console.log(unassignedTasks);\r\n                                    console.log(pendingTasks);\r\n                                    setTaskStateUpdated(true);\r\n                                    setNotifyMsg({\r\n                                        isOpen: true,\r\n                                        message:\r\n                                            \"Task is unssigned from you. Email notification will be sent shortly.\",\r\n                                        type: \"warning\",\r\n                                    });\r\n                                })\r\n                                .catch(function (error) {\r\n                                    console.log(error);\r\n                                });\r\n                        } else {\r\n                            console.log(\"alert task already returned\");\r\n                        }\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.log(\"error\");\r\n                        console.log(error.request);\r\n                        console.log(error.config);\r\n                        console.log(error.message);\r\n                    });\r\n            },\r\n        });\r\n    };\r\n\r\n    const handleAccept = (taskId) => {\r\n        console.log(\"Accepted userID\");\r\n        console.log(userId);\r\n        setConfirmDialog({\r\n            isOpen: true,\r\n            title: \"Do you agree to accept this task?\",\r\n            subTitle:\r\n                \"Once accepted it will be assigned to you.To return the task you need to go to your task list and reject it.\",\r\n            onConfirm: () => {\r\n                setConfirmDialog({\r\n                    ...confirmDialog,\r\n                    isOpen: false,\r\n                });\r\n                setTaskStateUpdated(false);\r\n                axios\r\n                    .get(\"https://letmeknow.uk/api/tasks/\" + taskId + \"/\")\r\n                    .then((response) => {\r\n                        const data = response.data;\r\n                        console.log(data);\r\n                        const task = response.data;\r\n                        const selectedTask = {\r\n                            status: `${task.status}`,\r\n                        };\r\n                        console.log(\"slected tasks\");\r\n                        console.log(selectedTask);\r\n                        if (selectedTask.status === \"OP\") {\r\n                            axios\r\n                                .patch(\"https://letmeknow.uk/api/tasks/\" + taskId + \"/\", {\r\n                                    status: \"AS\",\r\n                                    volId: userId,\r\n                                    isUpdatedByVol: true,\r\n                                })\r\n                                .then(function (response) {\r\n                                    console.log(response);\r\n\r\n                                    const assignTask = pendingTasks.map((task) =>\r\n                                        task.id === taskId\r\n                                            ? { ...task, volId: userId, status: \"AS\" }\r\n                                            : task\r\n                                    );\r\n                                    setPendingTasks(assignTask);\r\n                                    console.log(\"assignTasks\");\r\n                                    console.log(unassignedTasks);\r\n                                    console.log(\"myTask\");\r\n                                    console.log(myTasks);\r\n                                    console.log(pendingTasks);\r\n                                    setTaskStateUpdated(true);\r\n                                    setNotifyMsg({\r\n                                        isOpen: true,\r\n                                        message:\r\n                                            \"Task is successfully assigned to you.Email notification will be sent shortly.\",\r\n                                        type: \"success\",\r\n                                    });\r\n                                })\r\n                                .catch(function (error) {\r\n                                    console.log(error);\r\n                                });\r\n                        } else {\r\n                            setTaskStateUpdated(true);\r\n                            setNotifyMsg({\r\n                                isOpen: true,\r\n                                message:\r\n                                    \"Task has been already accepted by another volunteer. Please refresh the page to get the latest new tasks\",\r\n                                type: \"error\",\r\n                            });\r\n                            console.log(\"alert task already assigned\");\r\n                        }\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.log(\"error\");\r\n                        console.log(error.request);\r\n                        console.log(error.config);\r\n                        console.log(error.message);\r\n                    });\r\n            },\r\n        });\r\n    };\r\n\r\n    const handleComplete = (taskId) => {\r\n        setConfirmDialog({\r\n            isOpen: true,\r\n            title: \"Have you completed this task?\",\r\n            subTitle:\r\n                \"Once completed it will be marked as done will be removed from your list.\",\r\n            onConfirm: () => {\r\n                setConfirmDialog({\r\n                    ...confirmDialog,\r\n                    isOpen: false,\r\n                });\r\n                setTaskStateUpdated(false);\r\n                axios\r\n                    .get(\"https://letmeknow.uk/api/tasks/\" + taskId + \"/\")\r\n                    .then((response) => {\r\n                        const data = response.data;\r\n                        console.log(data);\r\n                        const task = response.data;\r\n                        const selectedTask = {\r\n                            status: `${task.status}`,\r\n                        };\r\n                        console.log(\"slected tasks\");\r\n                        console.log(selectedTask);\r\n                        if (selectedTask.status === \"AS\") {\r\n                            axios\r\n                                .patch(\"https://letmeknow.uk/api/tasks/\" + taskId + \"/\", {\r\n                                    status: \"DN\",\r\n                                    isUpdatedByVol: true,\r\n                                })\r\n                                .then(function (response) {\r\n                                    console.log(response);\r\n                                    const assignTask = pendingTasks.map((task) =>\r\n                                        task.id === taskId ? { ...task, status: \"DN\" } : task\r\n                                    );\r\n                                    setPendingTasks(assignTask);\r\n                                    console.log(\"assignTasks\");\r\n                                    console.log(unassignedTasks);\r\n                                    console.log(\"myTask\");\r\n                                    console.log(myTasks);\r\n                                    console.log(pendingTasks);\r\n                                    setTaskStateUpdated(true);\r\n                                    setNotifyMsg({\r\n                                        isOpen: true,\r\n                                        message:\r\n                                            \"Task is successfully marked as completed.Email notification will be sent shortly.\",\r\n                                        type: \"success\",\r\n                                    });\r\n                                })\r\n                                .catch(function (error) {\r\n                                    console.log(error);\r\n                                });\r\n                        } else {\r\n                            console.log(\"alert task already marked completed\");\r\n                        }\r\n                    })\r\n                    .catch(function (error) {\r\n                        console.log(\"error\");\r\n                        console.log(error.request);\r\n                        console.log(error.config);\r\n                        console.log(error.message);\r\n                    });\r\n            },\r\n        });\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {!dataFetched ? (\r\n                <div>\r\n                    <CircularProgress />\r\n                    <CircularProgress color=\"secondary\" />\r\n                </div>\r\n            ) : (\r\n                    <div style={{ height: \"100%\" }}>\r\n                        {!taskStateUpdated && (\r\n                            <div>\r\n                                {\" \"}\r\n                                <CircularProgress />\r\n                                <CircularProgress color=\"secondary\" />\r\n                            </div>\r\n                        )}\r\n\r\n                        <Grid\r\n                            id=\"tasks\"\r\n                            container\r\n                            spacing={2}\r\n                            direction=\"row\"\r\n                            justify=\"center\"\r\n                        >\r\n                            {!hideMyTask && (\r\n                                <Grid className=\"my-tasks\" item xs={12} sm={6} align=\"right\">\r\n                                    <Hidden smUp>\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"default\"\r\n                                            size=\"small\"\r\n                                            onClick={() => {\r\n                                                setHideMyTask(true);\r\n                                                setHideNewTask(false);\r\n                                            }}\r\n                                        >\r\n                                            Search New Tasks\r\n                                    </Button>{\" \"}\r\n                                    </Hidden>\r\n\r\n                                    <h4 className={classes.h5}>{\"My Assigned Tasks\"}</h4>\r\n                                    <TaskListTable\r\n                                        taskListData={myTasks}\r\n                                        isMyTask={true}\r\n                                        handleAccept={handleAccept}\r\n                                        handleReject={handleReject}\r\n                                        handleView={handleView}\r\n                                        handleComplete={handleComplete}\r\n                                    />\r\n                                </Grid>\r\n                            )}\r\n\r\n                            {!hideNewTask && (\r\n                                <Grid className=\"new-tasks\" item xs={12} sm={6} align=\"right\">\r\n                                    <Hidden smUp>\r\n                                        {\" \"}\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"default\"\r\n                                            size=\"small\"\r\n                                            onClick={() => {\r\n                                                setHideNewTask(true);\r\n                                                setHideMyTask(false);\r\n                                            }}\r\n                                        >\r\n                                            View My Tasks\r\n                                        </Button>\r\n                                    </Hidden>\r\n                                    <h4 className={classes.h5}>{\"Search New Tasks\"}</h4>\r\n                                    <TaskListTable\r\n                                        taskListData={unassignedTasks}\r\n                                        isMyTask={false}\r\n                                        handleAccept={handleAccept}\r\n                                        handleReject={handleReject}\r\n                                        handleView={handleView}\r\n                                        handleComplete={handleComplete}\r\n                                    />\r\n                                </Grid>\r\n                            )}\r\n                        </Grid>\r\n\r\n                        <TaskDialog\r\n                            open={showDialog}\r\n                            handleClose={handleClose}\r\n                            title=\"Task Summary\"\r\n                            data={dialogData}\r\n                        />\r\n                        <Notification\r\n                            notify={notifyMsg}\r\n                            setNotify={setNotifyMsg}\r\n                            verticalPosTop={true}\r\n                        />\r\n                        <ConfirmDialog\r\n                            confirmDialog={confirmDialog}\r\n                            setConfirmDialog={setConfirmDialog}\r\n                        />\r\n                    </div>\r\n                )}\r\n        </React.Fragment>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Button from '@material-ui/core/Button'\r\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart'\r\nimport PetsIcon from '@material-ui/icons/Pets'\r\nimport PhoneIcon from '@material-ui/icons/Phone'\r\nimport LocalPharmacyIcon from '@material-ui/icons/LocalPharmacy'\r\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital'\r\nimport LiveHelpIcon from '@material-ui/icons/LiveHelp'\r\n\r\n\r\nconst useStyles =\r\n    makeStyles(\r\n        {\r\n            h1: {\r\n                color: \"#4C4B51\"\r\n            },\r\n            largeButton: {\r\n                border: 5,\r\n                color: \"#FF8E53\",\r\n                padding: \"15px\",\r\n                margin: \"15px\",\r\n                height: 100,\r\n                width: 110,\r\n            },\r\n            largeIcon:\r\n                { fontSize: 60 },\r\n\r\n            label: {\r\n                flexDirection: 'column',\r\n                // color: '#4C4B51'\r\n            },\r\n            icon: {\r\n                fontSize: '32px !important',\r\n                marginBottom: 5\r\n            }\r\n        })\r\n\r\nexport default function NewTaskButtons({handleClickOpen}) {\r\n\r\n    const classes = useStyles();\r\n\r\n    return <div className=\"centered\">\r\n\r\n        <h1>I need help with...</h1>\r\n\r\n        <Button classes={{ root: classes.largeButton, label: classes.label }}\r\n            onClick={(e) => handleClickOpen(e, \"GRO\")}>\r\n            <ShoppingCartIcon className={classes.largeIcon} />\r\n            Shopping\r\n        </Button>\r\n        <Button classes={{ root: classes.largeButton, label: classes.label }}\r\n            onClick={(e) => handleClickOpen(e, \"PHA\")}>\r\n            <LocalPharmacyIcon className={classes.largeIcon} />\r\n            Pharmacy\r\n        </Button>\r\n        <Button classes={{ root: classes.largeButton, label: classes.label }}\r\n            onClick={(e) => handleClickOpen(e, \"DOG\")}>\r\n            <PetsIcon className={classes.largeIcon} />\r\n            Dog Walk\r\n        </Button>\r\n        <Button classes={{ root: classes.largeButton, label: classes.label }}\r\n            onClick={(e) => handleClickOpen(e, \"HOS\")}>\r\n            <LocalHospitalIcon className={classes.largeIcon} />\r\n            Hospital\r\n        </Button>\r\n        <Button classes={{ root: classes.largeButton, label: classes.label }}\r\n            onClick={(e) => handleClickOpen(e, \"CHAT\")}>\r\n            <PhoneIcon className={classes.largeIcon} />\r\n            Chat\r\n        </Button>\r\n        <Button classes={{ root: classes.largeButton, label: classes.label }}\r\n            onClick={(e) => handleClickOpen(e, \"ANY\")}>\r\n            <LiveHelpIcon className={classes.largeIcon} />\r\n            Other\r\n        </Button>\r\n\r\n    </div>\r\n}","import React, { useEffect, useState } from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Grid from \"@material-ui/core/Grid\"\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport { useForm, Controller } from 'react-hook-form'\r\nimport axios from \"axios\"\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    p: { margin: \"10px 2px 10px 2px\" },\r\n    root: {\r\n        padding: \"8px 0px 8px 0px\"\r\n    }\r\n})\r\n\r\nfunction FormDialog({ open, handleClose, taskType, defaultValues, \r\n    updTaskId, updateTaskList, reqId }) {\r\n\r\n    useEffect(() => {\r\n        reset(defaultValues);\r\n    }, [defaultValues])\r\n\r\n\r\n    const dialogHeader = {\r\n        \"GRO\": \"Shopping\",\r\n        \"PHA\": \"Collect medicine\",\r\n        \"DOG\": \"Dog Walking\",\r\n        \"HOS\": \"Visit Hospital Appointment\",\r\n        \"CHAT\": \"Friendly Chat\",\r\n        \"ANY\": \"I need help with ...\",\r\n    }\r\n\r\n    const taskTypeId = taskType ? taskType.id : null\r\n    const taskTypeCode = taskType ? taskType.task_type : null\r\n    const minDuration = taskType ? taskType.min_duration : null\r\n\r\n    const getFormDate = date => {\r\n        let year = date.getFullYear();\r\n        let month = (1 + date.getMonth()).toString().padStart(2, '0');\r\n        let day = date.getDate().toString().padStart(2, '0');\r\n        return year + '-' + month + '-' + day\r\n    }\r\n\r\n    const { register, handleSubmit, reset, errors, watch, setValue, clearErrors } =\r\n        useForm({ defaultValues: defaultValues, mode: \"all\" })\r\n\r\n    const resetAndClose = () => {\r\n        reset()\r\n        handleClose()\r\n    }\r\n\r\n    const createItem = (data, start, end) => {\r\n        let item = {}\r\n        item[\"task_type\"] = taskTypeId\r\n        item[\"description\"] = data.taskDetails || \"\"\r\n        item[\"dbs_required\"] = data.dbsReq\r\n        item[\"start_time\"] = start\r\n        item[\"end_time\"] = end\r\n        // TODO correct!!!! Requestee ID hardcoded!!!!!\r\n        console.log(\"Requestee ID: \", reqId)\r\n        item[\"requestee\"] = reqId > 0 ? reqId : 100\r\n        item[\"volunteer\"] = null\r\n        console.log(\"item created: \", item)\r\n        return item\r\n    }\r\n\r\n    const onSubmit = (data) => {\r\n        const start = new Date(data.startDate + \"T\" + data.startTime)\r\n        const end = new Date(data.endDate + \"T\" + data.endTime)\r\n        const item = createItem(data, start, end)\r\n        console.log(\"Submitting item: \", item)\r\n        // adding new task\r\n        if (updTaskId < 0)\r\n            axios.post(\"https://letmeknow.uk/api/tasks/\", item)\r\n                .then(function (response) {\r\n                    console.log(\"POST RESPONSE: \", response)\r\n                    console.log(\"POST RESPONSE DATA: \", response.data)\r\n                    const newTaskId = (response.status === 201) ? response.data.id : -1\r\n                    if (newTaskId > 0) {\r\n                        console.log(\"Adding new item to the list of tasks... New Task id=\", newTaskId)\r\n                        const newTask = response.data\r\n                        updateTaskList(newTask, -1)\r\n                        console.log(\"onSubmit: newTaskId: \", newTaskId)\r\n                    }\r\n                    else\r\n                        console.log(\"Something was unsuccessful. Request status: \", response.status)\r\n                })\r\n                .catch(function (error) {\r\n                    console.log(error.request)\r\n                    console.log(error.config)\r\n                })\r\n        // updating existing task\r\n        else\r\n            axios.put(\"https://letmeknow.uk/api/tasks/\" + updTaskId + '/', item)\r\n                .then(function (response) {\r\n                    console.log(\"PUT RESPONSE: \", response)\r\n                    console.log(\"PUT RESPONSE DATA: \", response.data.id)\r\n                    if (response.status === 200) {\r\n                        const updatedTask = response.data\r\n                        updateTaskList(updatedTask, response.data.id)\r\n                        console.log(\"onSubmit: updated task with id: \", updTaskId)\r\n                    }\r\n                    else console.log(\"Something went wrong on task update.. Response status: \", response.status)\r\n                }\r\n                )\r\n                .catch(function (error) {\r\n                    console.log(error.request)\r\n                    console.log(error.config)\r\n                })\r\n\r\n        console.log(\"onSubmit: updTaskId: \", updTaskId)\r\n        resetAndClose()\r\n    };\r\n\r\n    const watchAll = watch()\r\n\r\n    const validateTimes = () => {\r\n        const start = new Date(watchAll.startDate + \"T\" + watchAll.startTime)\r\n        const end = new Date(watchAll.endDate + \"T\" + watchAll.endTime)\r\n\r\n        if (!watchAll.startDate || !watchAll.startTime ||\r\n            !watchAll.endDate || !watchAll.endTime) {\r\n            clearErrors(\"endTime\")\r\n            return\r\n        }\r\n\r\n        const minEnd = start.setMinutes(start.getMinutes() + minDuration)\r\n        if (minEnd > end)\r\n            return \"Not enough time to complete your task. \" +\r\n                \"Consider at least \" + minDuration + \" minutes.\"\r\n    }\r\n\r\n    const handleStartDate = e => {\r\n        if (!e.target.value) return\r\n        if ((!watchAll.endDate) ||\r\n            (watchAll.endDate && (watchAll.endDate < e.target.value))) {\r\n            setValue(\"endDate\", e.target.value)\r\n        }\r\n    }\r\n\r\n    const handleEndDate = e => {\r\n        if (!e.target.value) return\r\n        if (watchAll.startDate && (watchAll.startDate > e.target.value)) {\r\n            setValue(\"startDate\", e.target.value)\r\n        }\r\n    }\r\n\r\n    const classes = useStyles();\r\n\r\n    const reqFieldMsg = \"Required field\"\r\n\r\n    return (\r\n        <div>\r\n            <Dialog open={open} onClose={resetAndClose} fullWidth maxWidth=\"sm\">\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <DialogTitle id=\"dialog-add-task\">\r\n                        {dialogHeader[taskTypeCode]}\r\n                    </DialogTitle>\r\n                    <DialogContent>\r\n                        < TextField\r\n                            id=\"taskDetails\"\r\n                            name=\"taskDetails\"\r\n                            inputRef={register({ required: [\"GRO\", \"ANY\"].includes(taskTypeCode) })}\r\n                            // autoFocus\r\n                            label=\"Details\"\r\n                            multiline\r\n                            rows={5}\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            InputLabelProps={{\r\n                                shrink: true,\r\n                            }}\r\n                            error={errors.taskDetails}\r\n                            helperText={errors.taskDetails && \"Details are required for this task type\"}\r\n                        />\r\n\r\n                        <p className={classes.p}>\r\n                            <br />\r\n                            Set dates when you need it: < br />\r\n                            <Typography variant=\"caption\">\r\n                                Providing wider time window will increase your chances to find a volunteer.\r\n                            </ Typography >\r\n                        </p>\r\n\r\n                        <Grid id=\"start-time\" container spacing={3}>\r\n                            <Grid item xs={12} sm={6} >\r\n                                <TextField\r\n                                    inputRef={register({ required: reqFieldMsg })}\r\n                                    id=\"startDate\"\r\n                                    name=\"startDate\"\r\n                                    label=\"Starting from\"\r\n                                    type=\"date\"\r\n                                    margin=\"dense\"\r\n                                    fullWidth\r\n                                    inputProps={{ min: getFormDate(new Date()) }}\r\n                                    onChange={handleStartDate}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    error={errors.hasOwnProperty(\"startDate\")}\r\n                                    helperText={errors.startDate && errors.startDate.message}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    inputRef={register({ required: reqFieldMsg })}\r\n                                    type=\"time\"\r\n                                    id=\"startTime\"\r\n                                    name=\"startTime\"\r\n                                    label=\"Time\"\r\n                                    margin=\"dense\"\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    error={errors.hasOwnProperty(\"startTime\")}\r\n                                    helperText={errors.startTime && errors.startTime.message}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid id=\"finish-time\" container spacing={3}>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    inputRef={register({ required: reqFieldMsg })}\r\n                                    type=\"date\"\r\n                                    margin=\"dense\"\r\n                                    inputProps={{ min: getFormDate(new Date()) }}\r\n                                    id=\"endDate\"\r\n                                    name=\"endDate\"\r\n                                    label=\"Ending at\"\r\n                                    fullWidth\r\n                                    onChange={handleEndDate}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    error={errors.hasOwnProperty(\"endDate\")}\r\n                                    helperText={errors.endDate && errors.endDate.message}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    inputRef={register({\r\n                                        required: reqFieldMsg,\r\n                                        validate: validateTimes\r\n                                    })}\r\n                                    type=\"time\"\r\n                                    id=\"endTime\"\r\n                                    name=\"endTime\"\r\n                                    label=\"Time\"\r\n                                    margin=\"dense\"\r\n                                    fullWidth\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                    }}\r\n                                    error={errors.hasOwnProperty(\"endTime\")}\r\n                                    helperText={errors.endTime && errors.endTime.message}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        {/* TODO */}\r\n                        {/* <FormControlLabel disabled\r\n                            control={\r\n                                <Checkbox\r\n                                    name=\"dbsRequired\"\r\n                                    checked={false}\r\n                                />}\r\n                            label=\"Only volunteers with DBS certificate\"\r\n                        /> */}\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={resetAndClose} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button type=\"Submit\" color=\"primary\">\r\n                            Submit\r\n                        </Button>\r\n                    </DialogActions>\r\n                </form>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FormDialog","import React from \"react\"\r\nimport moment from \"moment\";\r\nimport MUIDataTable from \"mui-datatables\"\r\nimport Button from \"@material-ui/core/Button\"\r\nimport { createMuiTheme, MuiThemeProvider } from \"@material-ui/core/styles\";\r\n\r\n\r\nexport default function TaskTable({ taskList, handleCopy, handleEdit, handleCancel, handleSearchVol }) {\r\n\r\n\r\n    const theme = () => createMuiTheme({\r\n        overrides: {\r\n            // MUIDataTableToolbar: {\r\n            //     root: {\r\n            //         // width: \"min-content\",\r\n            //         // margin: \"20px 0px 0px 0px\",\r\n            //         backgroundColor: '#AAF',\r\n            //     },\r\n            // },\r\n            MuiPaper: {\r\n                root: {\r\n                    // width: \"min-content\",\r\n                    margin: \"20px 0px 0px 0px\",\r\n                    // backgroundColor: '#AAF',\r\n                },\r\n            },\r\n            MuiTableCell: {\r\n                root: {\r\n                    //  maxWidth: \"120px\",\r\n                    padding: \"5px 5px 5px 15px\"\r\n                },\r\n            },\r\n            MUIDataTableToolbar: {\r\n                root: {\r\n                    background: '#AAF',\r\n                }\r\n            },\r\n            MUIDataTableHeadCell: {\r\n                root: {\r\n                    //   height: 56,\r\n                    //   fontSize: 12,\r\n                    overflow: \"hidden\",\r\n                    whiteSpace: \"nowrap\",\r\n                    textOverflow: \"ellipsis\",\r\n                    position: \"relative\"\r\n                }\r\n            },\r\n            MUIDataTableBodyCell: {\r\n                root: {\r\n                    //   height: 20,\r\n                    //   fontFamily: \"Oxygen\",\r\n                    //   fontSize: 13,\r\n                    overflow: \"hidden\",\r\n                    whiteSpace: \"nowrap\",\r\n                    textOverflow: \"ellipsis\",\r\n                    position: \"relative\",\r\n                    //   maxWidth: 0\r\n                }\r\n            },\r\n            // MUIDataTablePagination: {\r\n            //     root: {\r\n            //         display: \"flex\",\r\n            //         justifyContent: \"center\",\r\n            //         alignItems: \"center\",\r\n            //         textAlign: \"center\"\r\n            //     },\r\n            //     caption: {\r\n            //         fontSize: 16\r\n            //     }\r\n            // }\r\n        },\r\n    });\r\n\r\n    const options = {\r\n        selectableRows: false,\r\n        print: false,\r\n        download: false,\r\n        rowsPerPage: 20,\r\n        rowsPerPageOptions: [5, 10, 20],\r\n        setRowProps: row => {\r\n            if (row[6] === \"Assigned\") {\r\n                return {\r\n                    style: { background: \"palegreen\" }\r\n                }\r\n            }\r\n            if (row[6] === \"Open\") {\r\n                return {\r\n                    style: { background: \"lemonchiffon\" }\r\n                }\r\n            }\r\n            if (row[6] === \"Expired\") {\r\n                return {\r\n                    style: { background: \"lightpink\" }\r\n                }\r\n            }\r\n        },\r\n        // resizableColumns: true,\r\n        sortOrder: {\r\n            name: \"start\",\r\n            direction: \"desc\",\r\n        },\r\n    };\r\n\r\n    const columns = [\r\n        {\r\n            name: \"id\",\r\n            label: \"ID\",\r\n\r\n            options: {\r\n                display: false,\r\n                sort: true,\r\n                filter: false,\r\n                width: \"5%\",\r\n                viewColumns: false\r\n            },\r\n        },\r\n        {\r\n            name: \"taskTypeName\",\r\n            label: \"Task Type\",\r\n\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                width: \"10%\",\r\n            },\r\n        },\r\n        {\r\n            name: \"taskDetails\",\r\n            label: \"Task Detail\",\r\n\r\n            options: {\r\n                display: true,\r\n                filter: false,\r\n                sort: false,\r\n                width: \"15%\",\r\n\r\n                customBodyRender: (value) => {\r\n                    const maxSymb = 30\r\n                    return value.slice(0, maxSymb) + (value.length > maxSymb ? \"...\" : \"\")\r\n                },\r\n            },\r\n        },\r\n       /* {\r\n            name: \"id\",\r\n            label: \" Task Detail\",\r\n\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                viewColumns: false,\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                    return (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            style={{\r\n                                marginLeft: 2,\r\n                                minWidth: \"70px\",\r\n                            }}\r\n                            value={value}\r\n                            onClick={(e) => {\r\n                                console.log(tableMeta.rowData[0])\r\n                                handleSearchVol(e, tableMeta.rowData[0]);\r\n                            }}\r\n                        >\r\n                            Search\r\n                        </Button>\r\n                    );\r\n                },\r\n            },\r\n        },*/\r\n        {\r\n            name: \"start\",\r\n            label: \"Time Period\",\r\n            options: {\r\n                filter: false,\r\n                sort: true,\r\n                width: \"10%\",\r\n\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return <div>\r\n                        {moment(value).format('lll')}<br/>\r\n                        {moment(tableMeta.rowData[4]).format('lll')}</div>},\r\n            },\r\n        },\r\n        {\r\n            name: \"end\",\r\n            label: \"End Time\",\r\n            options: {\r\n                display: false,\r\n                filter: false,\r\n                sort: false,\r\n                viewColumns: false,\r\n                // width: \"10%\",\r\n\r\n                //     customBodyRender: (value) =>\r\n                //         moment(value).format('lll'),\r\n            },\r\n        },\r\n        {\r\n            name: \"volunteerId\",\r\n            label: \"Volunteer\",\r\n            options: {\r\n                filter: false,\r\n                sort: true,\r\n                width: \"10%\",\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return <div>\r\n                        {tableMeta.rowData[6] == \"Open\" && !tableMeta.rowData[8] ?\r\n                            /* Open status*/\r\n                            (tableMeta.rowData[9] ?\r\n                                <b>Requested</b> :\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    size=\"small\"\r\n                                    className=\"button\"\r\n                                    onClick={() => {}}\r\n                                >\r\n                                    Search\r\n                                </Button> ) : null\r\n                        }\r\n                        {tableMeta.rowData[6] == \"Open\" && tableMeta.rowData[8] ?\r\n                            /* Open Expired*/\r\n                            tableMeta.rowData[9]\r\n                            : null\r\n                        }\r\n                        {value ?\r\n                            /* All other states*/\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"default\"\r\n                                size=\"small\"\r\n                                className=\"button\"\r\n                                onClick={() => {}}\r\n                            >\r\n                                Contact\r\n                            </Button> : null}\r\n                    </div>\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: \"statusName\",\r\n            label: \"State\",\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                width: \"10%\",\r\n                customBodyRender: (value, tableMeta) =>\r\n                    tableMeta.rowData[8] &&\r\n                    ([\"Open\", \"Assigned\"].includes(value)) ? \"Expired\" : value ,\r\n            },\r\n        },\r\n        {\r\n            name: \"id\",\r\n            label: \"Actions\",\r\n\r\n            options: {\r\n                sort: false,\r\n                filter: false,\r\n                width: \"30%\",\r\n                customBodyRender: (value, tableMeta) => {\r\n                    return (\r\n                        <div>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                size=\"small\"\r\n                                className=\"button\"\r\n                                onClick={() => {\r\n                                    console.log(tableMeta.rowData[0])\r\n                                    handleCopy(tableMeta.rowData[0])\r\n                                }}\r\n                            >\r\n                                Copy\r\n                            </Button>\r\n                            {[\"Open\", \"Expired\"].includes(tableMeta.rowData[6]) ?\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"default\"\r\n                                    size=\"small\"\r\n                                    className=\"button\"\r\n                                    style={{\r\n                                        marginLeft: 10\r\n                                    }}\r\n                                    onClick={() => {\r\n                                        console.log(tableMeta.rowData[0])\r\n                                        handleEdit(tableMeta.rowData[0])\r\n                                    }}\r\n                                >\r\n                                    Edit\r\n                                </Button>\r\n                                : null}\r\n                            {[\"Open\"].includes(tableMeta.rowData[6]) && !tableMeta.rowData[8] ?\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    size=\"small\"\r\n                                    className=\"button\"\r\n                                    style={{\r\n                                        marginLeft: 10\r\n                                    }}\r\n                                    onClick={() => {\r\n                                        console.log(tableMeta.rowData[0])\r\n                                        handleCancel(tableMeta.rowData[0])\r\n                                    }}\r\n                                >\r\n                                    Cancel\r\n                                </Button>\r\n                                : null}\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: \"expired\",\r\n            label: \"Expired\",\r\n            options: {\r\n                display: false,\r\n                filter: false,\r\n                viewColumns: false,\r\n                // width: \"5%\",\r\n            },\r\n        },\r\n        {\r\n            name: \"requestedVol\",\r\n            label: \"Requested Vol\",\r\n            options: {\r\n                display: false,\r\n                filter: false,\r\n                viewColumns: false,\r\n                // width: \"5%\",\r\n            },\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <MuiThemeProvider theme={theme()}>\r\n                <MUIDataTable\r\n                    title=\"All Tasks\"\r\n                    data={taskList}\r\n                    columns={columns}\r\n                    options={options}\r\n                />\r\n            </MuiThemeProvider>\r\n        </React.Fragment>\r\n    );\r\n}","import Button from \"@material-ui/core/Button\";\r\nimport {\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogTitle,\r\n} from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport { createMuiTheme, MuiThemeProvider } from \"@material-ui/core/styles\";\r\nimport React, { useState, useEffect } from 'react'\r\n\r\nconst useStyles = (theme) => ({\r\n    button: {\r\n        border: \"4px\",\r\n        color: \"default\",\r\n        fontWeight: \"bold\",\r\n        marginLeft: 10,\r\n        marginTop: \"10px\",\r\n    },\r\n    form: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        margin: \"auto\",\r\n        width: \"fit-content\",\r\n    },\r\n});\r\n\r\nconst options = {\r\n    selectableRows: \"none\", //can also be single/mulitple\r\n    rowsPerPage: 5,\r\n    rowsPerPageOptions: [5, 10, 15, 20],\r\n    print: false,\r\n    download: false,\r\n    filter: false,\r\n    viewColumns: false,\r\n    sortOrder: {\r\n        name: \"distance\",\r\n        direction: \"desc\",\r\n    },\r\n};\r\n\r\nconst localVolData = [\r\n    {\r\n        reqId: 1,\r\n        reqVolId: 2, \r\n        lastName: \"Snow\", \r\n        firstName: \"Jon\",      \r\n        distance: 1,        \r\n    },\r\n    {\r\n        reqId: 1,\r\n        reqVolId: 3, \r\n        lastName: \"Kate\", \r\n        firstName: \"Kelly\",      \r\n        distance: 0.8,  \r\n    },\r\n    {\r\n        reqId: 1,\r\n        reqVolId: 4, \r\n        lastName: \"Caroline\", \r\n        firstName: \"Gardener\",      \r\n        distance: 0.9,  \r\n    },\r\n];\r\nconst SearchVolunteer = ({ open, handleClose, title, data, requestVolunteer }) => {\r\n    const selectedtask = data;\r\n    const[selectedVol, setSelectedVol] = useState(null) ;\r\n    const theme = useTheme();\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n\r\n    const muiTheme = () =>\r\n        createMuiTheme({\r\n            overrides: {\r\n                MuiDataTable: {\r\n                    root: {\r\n                        width: \"min-content\",\r\n                    },\r\n                    responsiveScroll: {\r\n                        maxHeight: \"none\", //not working\r\n                    },\r\n                },\r\n                MUIDataTableToolbar: {\r\n                    root: {\r\n                        background: \"#AAF\",\r\n                    },\r\n                },\r\n                MUIDataTableBodyCell: {\r\n                    root: {\r\n                        overflow: \"hidden\",\r\n                        whiteSpace: \"nowrap\",\r\n                        textOverflow: \"ellipsis\",\r\n                        position: \"relative\",\r\n                        backgroundColor: \"#FFF\",\r\n                    },\r\n                },\r\n            },\r\n        });\r\n\r\n    const cols = [\r\n        {\r\n            name: \"reqId\",\r\n            label: \"requestee ID\",\r\n            options: {\r\n                display: false,\r\n                sort: false,\r\n                filter: false,\r\n                viewColumns: false,\r\n            },\r\n        },\r\n        {\r\n            name: \"reqVolId\",\r\n            label: \"volunteer ID\",\r\n            options: {\r\n                display: false,\r\n                sort: false,\r\n                filter: false,\r\n                viewColumns: false,\r\n            },\r\n        },\r\n        {\r\n            name: \"firstName\",\r\n            label: \"First name\",\r\n\r\n            options: {\r\n                display: false,\r\n                filter: true,\r\n                sort: true,\r\n            },\r\n        },\r\n        {\r\n            name: \"lastName\",\r\n            label: \"Last name\",\r\n\r\n            options: {\r\n                display: false,\r\n                filter: true,\r\n                sort: true,\r\n            },\r\n        },\r\n        {\r\n            name: \"firstName\",\r\n            label: \"Full Name\",\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                    //console.log(tableMeta.rowData, '......');\r\n                    return (\r\n                        <div>\r\n                            {tableMeta.rowData[2]} {tableMeta.rowData[3]}\r\n                        </div>\r\n                    );\r\n                },\r\n            },\r\n        },\r\n        {\r\n            name: \"distance\",\r\n            label: \"Dist\",\r\n            options: {\r\n                filter: true,\r\n                sort: true,\r\n                // width: \"5%\",\r\n            },\r\n        },\r\n        {\r\n            name: \"reqVolId\",\r\n            label: \"Request\",\r\n\r\n            options: {\r\n                filter: false,\r\n                sort: false,\r\n                viewColumns: false,                \r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                    return (\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            style={{\r\n                                marginLeft: 2,\r\n                                minWidth: \"70px\",\r\n                            }}\r\n                            value={value}\r\n                            onClick={(e) => {\r\n                                \r\n                                console.log(\"selectedtask\" + data.id)\r\n                                console.log(\"selected volunteer\" + value)\r\n                                setSelectedVol(value)\r\n                               // requestVolunteer(value);\r\n                            }}\r\n                        >\r\n                            Request\r\n                        </Button>\r\n                    );\r\n                },\r\n            },\r\n        },\r\n    ];\r\n    console.log(data);\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}\r\n                fullScreen={fullScreen}\r\n                aria-labelledby=\"responsive-dialog-title\"\r\n            >\r\n                <DialogTitle>{title}</DialogTitle>\r\n                <DialogContent>\r\n                    {data && (\r\n                        <div>\r\n                            <p>For your selected task you can send request to your local volunteer available below: </p>\r\n                            <MuiThemeProvider theme={muiTheme()}>\r\n                                <MUIDataTable\r\n                                    title=\"Request volunteer\"\r\n                                    data={localVolData}\r\n\r\n                                    columns={cols}\r\n                                    options={options}\r\n                                />\r\n                            </MuiThemeProvider>\r\n                        </div>\r\n                    )}\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button autoFocus onClick={handleClose} color=\"primary\">\r\n                        Close\r\n        </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SearchVolunteer;\r\n","import React, { useState, useEffect } from 'react'\r\nimport NewTaskButtons from './NewTaskButtons'\r\nimport NewTaskForm from './NewTaskForm'\r\nimport TasksTable from './TaskTable'\r\nimport axios from \"axios\"\r\nimport moment from \"moment\";\r\nimport { useAuth } from \"../../contexts/AuthContext\";\r\nimport SearchVolunteerDialog from './SearchVolunteer'\r\n\r\n\r\nfunction AddTask() {\r\n    // const { currentUser } = useAuth()\r\n    // const userUID = \"WKERfsSJNM\"  // user with no tasks\r\n    const userUID = \"BeCXXLBaHB\" // currentUser.uid\r\n    const [reqId, setReqId] = useState(-1)\r\n    const [taskList, setTaskList] = useState([])\r\n    const [taskTypeList, setTaskTypeList] = useState({})\r\n\r\n    const parseDbTask = (dbTask) => {\r\n        let task = {}\r\n        task.id = dbTask.id\r\n        task.taskType = dbTask.task_type\r\n        task.taskTypeName = dbTask.task_type_details.task_type_name\r\n        task.taskDetails = dbTask.description\r\n        task.start = dbTask.start_time\r\n        task.end = dbTask.end_time\r\n        task.expired = dbTask.expired\r\n        task.dbsReq = dbTask.dbs_required\r\n        task.status = dbTask.status\r\n        task.statusName = dbTask.status_name\r\n        task.volunteerId = dbTask.volunteer\r\n        task.volunteer = dbTask.volunteer ? dbTask.volunteer_details : null\r\n        task.requestedVol = dbTask.requested_vol ?\r\n            dbTask.requested_vol_details.first_name + ' ' +\r\n            dbTask.requested_vol_details.last_name : null\r\n        return task\r\n    }\r\n\r\n    useEffect(() => {\r\n        const options = {\r\n            method: 'GET',\r\n            url: \"https://letmeknow.uk/api/requestee/tasks/\",\r\n            timeout: 8000,\r\n            params: {\r\n                requid: userUID,\r\n            },\r\n        }\r\n        axios(options)\r\n            .then((response) => {\r\n                // console.log(\"All user' tasks: \", response.data)\r\n                const taskData = response.data.map(task => parseDbTask(task))\r\n                setTaskList(taskData)\r\n\r\n                if (response.data.length > 0) {\r\n                    setReqId(response.data[0].requestee)\r\n                    console.log(\"Requestee ID: \", reqId, typeof reqId)\r\n                }\r\n                else {\r\n                    console.log(\"Asking user id..\")\r\n                    axios.get(\"https://letmeknow.uk/api/accounts/get_user_by_id/\", {\r\n                        params: { uId: userUID, },\r\n                    })\r\n                        .then((response) => {\r\n                            console.log(response)\r\n                            console.log(\"Requestee id: \", response.data[0]);\r\n                            setReqId(response.data[0])\r\n                        })\r\n                        .catch(error => {\r\n                            console.log(\"error\");\r\n                            console.log(error.message, error.request);\r\n                        })\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(\"error\")\r\n                console.log(error.message);\r\n                console.log(error.request);\r\n                console.log(error.config);\r\n            })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        axios.get(\"https://letmeknow.uk/api/tasktypes/\")\r\n            .then((response) => {\r\n                // console.log(\"Task types:\", response.data)\r\n                setTaskTypeList(response.data)\r\n                // TODO notification not all data got\r\n                // if (response.data.length == 0) {\r\n                //     alert()\r\n                // }\r\n            })\r\n            .catch(error => {\r\n                console.log(\"error\")\r\n                console.log(error.message);\r\n                console.log(error.request);\r\n                console.log(error.config);\r\n            })\r\n    }, [])\r\n\r\n    const addTask = newTask => {\r\n        const updatedTaskList = [...taskList, newTask]\r\n        setTaskList(updatedTaskList)\r\n        console.log(\"All Tasks:\", taskList)\r\n    }\r\n\r\n    const updateTask = (updTask, id) => {\r\n        let updatedTaskList = taskList.filter(task => task.id !== id)\r\n        updatedTaskList = [...updatedTaskList, updTask]\r\n        setTaskList(updatedTaskList)\r\n    }\r\n\r\n    const updateTaskList = (dbTask, id) => {\r\n        if (id < 0)\r\n            addTask(parseDbTask(dbTask))\r\n        else\r\n            updateTask(parseDbTask(dbTask), id)\r\n    }\r\n\r\n    const requestVolunteer =(dbTask, volId)=>\r\n    {\r\n\r\n    }\r\n    \r\n\r\n    const taskDefaults = {\r\n        taskDetails: \"\",\r\n        startDate: null,\r\n        startTime: \"08:00\",\r\n        endDate: null,\r\n        endTime: \"20:00\"\r\n    }\r\n\r\n    const [showAddDialog, setShowAddDialog] = React.useState(false);\r\n    const [showSearchDialog, setShowSearchDialog] = React.useState(false);\r\n    const [dialogData, setDialogData] = React.useState(null);\r\n    const [taskType, setTaskType] = React.useState(null);\r\n    const [newTaskDefaults, setNewTaskDefaults] = React.useState(taskDefaults)\r\n    const [updTaskId, setUpdTaskId] = React.useState(-1)\r\n\r\n    const handleClickOpen = (e, taskType) => {\r\n        setTaskType(taskTypeList.find(type => type.task_type == taskType))\r\n        setShowAddDialog(true)\r\n    }\r\n    \r\n    const handleClose = () => {\r\n        setTaskType(null)\r\n        setShowAddDialog(false)\r\n        setNewTaskDefaults(taskDefaults)\r\n        setUpdTaskId(-1)\r\n    }\r\n\r\n    const handleSearchOpen = (e, dialogData) => {        \r\n        setShowSearchDialog(true);\r\n        setDialogData(dialogData);\r\n    }\r\n\r\n    const handleSearchClose = () => {      \r\n        setShowSearchDialog(false);\r\n        setDialogData(null);       \r\n    }\r\n\r\n    const findTaskType = id => {\r\n        return taskTypeList.find(type => type.id == id)\r\n    }\r\n    const handleCopy = id => {\r\n        const taskToCopy = taskList.find(task => task.id === id)\r\n        setTaskType(findTaskType(taskToCopy.taskType))\r\n        setNewTaskDefaults({\r\n            ...newTaskDefaults,\r\n            taskDetails: taskToCopy.taskDetails,\r\n        })\r\n        setShowAddDialog(true)\r\n    }\r\n\r\n    const handleEdit = id => {\r\n        const taskToEdit = taskList.find(task => task.id === id)\r\n        setTaskType(findTaskType(taskToEdit.taskType))\r\n        setNewTaskDefaults({\r\n            taskDetails: taskToEdit.taskDetails,\r\n            startDate: moment(taskToEdit.start).format('YYYY-MM-DD'),\r\n            startTime: moment(taskToEdit.start).format('HH:mm'),\r\n            endDate: moment(taskToEdit.end).format('YYYY-MM-DD'),\r\n            endTime: moment(taskToEdit.end).format('HH:mm'),\r\n        })\r\n        setUpdTaskId(id)\r\n        setShowAddDialog(true)\r\n    }\r\n\r\n    const handleSearchVol = (e, id) => {\r\n        const taskToRequest = taskList.find(task => task.id === id)\r\n        console.log(taskToRequest);\r\n        if (taskToRequest != null) {\r\n            handleSearchOpen(e, taskToRequest);\r\n        }\r\n    };\r\n    const handleCancel = id => {\r\n        axios.patch(\"https://letmeknow.uk/api/tasks/\" + id + '/', { status: \"CL\" })\r\n            .then(function (response) {\r\n                console.log(\"PATCH RESPONSE: \", response)\r\n                console.log(\"PATCH RESPONSE DATA: \", response.data.id)\r\n                if (response.status === 200) {\r\n                    const updatedTask = response.data\r\n                    updateTaskList(updatedTask, response.data.id)\r\n                    console.log(\"onSubmit: updated task with id: \", updTaskId)\r\n                    // update frontend list of task\r\n                    // console.log(updateTask)\r\n                    updateTaskList(updatedTask, id)\r\n                }\r\n                else console.log(\"Something went wrong on task update..\",\r\n                    \"Response status: \", response.status)\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error.request)\r\n                console.log(error.config)\r\n            })\r\n    }\r\n\r\n\r\n    return <div className=\"centered\">\r\n\r\n        <NewTaskButtons handleClickOpen={handleClickOpen} />\r\n\r\n        <NewTaskForm open={showAddDialog} handleClose={handleClose} taskType={taskType}\r\n            defaultValues={newTaskDefaults} updTaskId={updTaskId}\r\n            updateTaskList={updateTaskList} reqId={reqId} />\r\n\r\n        <TasksTable taskList={taskList} handleCopy={handleCopy}\r\n            handleEdit={handleEdit} handleCancel={handleCancel} handleSearchVol={handleSearchVol}/>\r\n        \r\n        <SearchVolunteerDialog\r\n                            open={showSearchDialog}\r\n                            handleClose={handleSearchClose}\r\n                            title=\"Search Volunteer\"\r\n                            data={dialogData}\r\n                        />\r\n    </div>\r\n}\r\n\r\nexport default AddTask","import VolunteerSearchTask from \"./VolunteerSearchTask\";\r\n\r\nconst VolunteerWelcome = () => {\r\n  return (\r\n    <div>\r\n      <VolunteerSearchTask />        \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VolunteerWelcome;\r\n","import React from \"react\"\r\nimport { Route, Redirect } from \"react-router-dom\"\r\nimport { useAuth } from \"../contexts/AuthContext\"\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }) {\r\n  const { currentUser } = useAuth()\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={props => {\r\n          console.log(currentUser)\r\n        return currentUser ? <Component {...props} /> : <Redirect to=\"/\" />\r\n        \r\n      }}\r\n    ></Route>\r\n  )\r\n}","import React from \"react\";\r\nimport \"./App.css\";\r\nimport AppNavBar from \"./components/structure/AppNavBar\"\r\nimport Landing from \"./components/landing/Landing\"\r\nimport Legal from \"./components/landing/Legal\"\r\nimport Cookie from \"./components/landing/Cookie\"\r\nimport Support from \"./components/landing/Support\"\r\nimport Privacy from \"./components/landing/Privacy\"\r\nimport TermConditions from \"./components/landing/TermConditions\"\r\nimport About from \"./components/landing/About\"\r\nimport Contact from \"./components/landing/Contact\"\r\nimport Footer from \"./components/structure/Footer\"\r\nimport SignIn from \"./components/login/SignIn\"\r\nimport SignUp from \"./components/login/SignUp\"\r\nimport Profile from \"./components/login/Profile\"\r\nimport ForgotPassword from \"./components/login/ForgotPassword\"\r\nimport RegistrationPage  from \"./components/registrationPage/RegistrationPage\"\r\nimport VolunteerSearchTask from \"./components/volunteerTask/VolunteerSearchTask\"\r\nimport AddTask from \"./components/task/AddTask\"\r\nimport VolunteerWelcome from \"./components/volunteerTask/VolunteerWelcomePage\"\r\nimport { BrowserRouter as Router,  Route, Switch } from \"react-router-dom\"\r\nimport { AuthProvider } from \"./contexts/AuthContext\"\r\nimport PrivateRoute from \"./components/PrivateRoute\"\r\n    \r\nfunction App() {\r\n    \r\n    return (\r\n        <Router>\r\n            <AuthProvider>\r\n            <div className=\"App\">\r\n                <AppNavBar />\r\n                <div className=\"AppContent\">\r\n                <Switch>\r\n                <Route exact path=\"/helpwhoneeds\">\r\n                    <Landing />\r\n                </Route>\r\n                <Route path=\"/about\">\r\n                    <About />\r\n                </Route>\r\n                <Route path=\"/contact\">\r\n                    <Contact />\r\n                </Route>\r\n                <Route path=\"/login/:userType\">\r\n                    <SignIn />\r\n                </Route>  \r\n                <Route path=\"/signup/:user\">\r\n                    <SignUp />\r\n                </Route>  \r\n                <Route path=\"/forgotpassword/:user\">\r\n                    <ForgotPassword />\r\n                </Route>    \r\n                <Route path=\"/legal\">\r\n                    <Legal />\r\n                </Route>    \r\n                <Route path=\"/support\">\r\n                    <Support />\r\n                </Route>    \r\n                <Route path=\"/privacy\">\r\n                    <Privacy />\r\n                </Route>    \r\n                <Route path=\"/cookie\">\r\n                    <Cookie />\r\n                </Route>\r\n                <Route path=\"/contact\">\r\n                    <Contact />\r\n                </Route>    \r\n                <Route path=\"/termconditions\">\r\n                    <TermConditions />\r\n                </Route>\r\n                <PrivateRoute path=\"/profile\" component= {Profile} /> \r\n                <PrivateRoute path=\"/registrationpage/:user\" component= {RegistrationPage} />\r\n                <PrivateRoute path=\"/searchtask\" component= {VolunteerSearchTask} />\r\n                <PrivateRoute path=\"/mytask\" component= {VolunteerWelcome} />\r\n                <PrivateRoute path=\"/addtask\" component= {AddTask} />\r\n                </Switch>\r\n                </div>\r\n                <Footer />\r\n            </div>\r\n            </AuthProvider>\r\n        </Router>\r\n       \r\n    );\r\n\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}